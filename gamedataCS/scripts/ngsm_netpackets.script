-------------------------------- Работа с нет-пакетами
local stpk=net_packet()
local uppk=net_packet()

function spawn_military_tech_pack(obj, spawn_item, c_data)	
	local packet = net_packet()
    packet:w_begin(0)
    obj:STATE_Write(packet)
    packet:r_seek(2)
	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()
	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	-- свойства cse_motion
	motion_name = packet:r_stringZ()
	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health 
	local cse_alife_helicopter__unk1_sz 
	local engine_sound
	-- свойства cse_alife_helicopter
	cse_alife_helicopter__unk1_sz = packet:r_stringZ()
	engine_sound = packet:r_stringZ()
	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)
	packet:w_s32(object_flags)
	if c_data~=nil then
       	packet:w_stringZ(c_data)
    else
    	packet:w_stringZ(custom_data) 
    end
    packet:w_s32(-1)
    packet:w_s32(cse_alife_object__unk3_s32)
	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	packet:w_stringZ(motion_name)		
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)
    -- свойства cse_alife_helicopter
    cse_alife_helicopter__unk1_sz = "idle"
    engine_sound = "vehicles\\helicopter\\helicopter"
    packet:w_stringZ(cse_alife_helicopter__unk1_sz)
    packet:w_stringZ(engine_sound)
	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

--Дополнительно:
    -- id на входе
function read_stalker_params_money(id)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		sobj:STATE_Write(stpk) 
		stpk:r_seek(2)
		-- cse_alife_trader_abstract properties
		return stpk:r_s32()
	end
	return nil
end

convert_npc = {}

function convert_npcs()
	for k,v in pairs(convert_npc) do
		local obj=level.object_by_id(k)
		local sobj=alife():object(k)
		if sobj then
			if obj==nil and v=="turn_on" then
				sobj.sim_forced_online = true
				if sobj.online ~= true then
					sobj:switch_online()
				end
				convert_npc[k]=false
			elseif obj and v=="turn_off" then
				if IsStalker(sobj) then
					obj:clear_animations()
					if sobj:alive() then
						obj:stop_talk()
					end
				end
				sobj:switch_offline()
				convert_npc[k]="turn_on"
				break
			elseif obj~=nil and v=="transfer_outfit" then
				local npc = level.object_by_id(sobj.pid)
				if npc then
					obj:transfer_item(obj,npc)
				else
					alife():release(sobj, true)
				end
				convert_npc[k]=false
			elseif obj and v==false then
				if not sobj:alive() then
					local h = hit()
					h.draftsman = obj
					h.type = hit.strike
					h.direction = obj:direction()
					h:bone("bip01_spine")
					h.power = 100
					h.impulse = 200
					obj:hit(h)
				end
				convert_npc[k]=nil
			end
		else
			convert_npc[k]=nil
		end
	end
end

function read_outfit_params(id)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		uppk:w_begin(0)
		sobj:STATE_Write(stpk)
		sobj:UPDATE_Write(uppk)
		local size=stpk:w_tell()
		local size1=uppk:w_tell()
		stpk:r_seek(2)
		uppk:r_seek(2)
		local tbl=parse_outfit_packet({},stpk,uppk,size,size1)
		return tbl
	end
	return nil
end

function write_outfit_params(tbl,id)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		uppk:w_begin(0)
		fill_outfit_packet(tbl,stpk,uppk)
		local size=stpk:w_tell()
		stpk:r_seek(2)
		uppk:r_seek(2)
		sobj:STATE_Read(stpk,size)
		sobj:UPDATE_Read(uppk)
	end
end

function fill_outfit_packet(ret,stpk,updpk)
    fill_dynamic_object_visual(ret,stpk,updpk)
    fill_item_packet(ret,stpk,updpk)
    updpk:w_u8(ret.upd_condition)
    write_extra(updpk,ret.upd_extra_data)
    stpk:w_u8(ret.imm)
    stpk:w_s32(ret.pid)
    stpk:w_float(ret.con)
    stpk:w_stringZ(ret.none)
    write_extra(stpk,ret.extra_data)
end

function fill_item_packet(ret,stpk,updpk)
  stpk:w_float(ret.condition)
  writevu32stringZ(stpk,ret.upgrades)
  updpk:w_u8(ret.upd_num_items)
  write_float(updpk,ret.float_data_item_packet)
  updpk:w_u8(ret.upd_ph_unknown)
end

function parse_outfit_packet(ret,stpk,updpk,size,size1)
  ogsm_packet.parse_dynamic_object_visual(ret,stpk,updpk)
  parse_item_packet(ret,stpk,updpk)
  ret.upd_condition=updpk:r_u8() 
  ret.upd_extra_data=read_extra(updpk,size1)
  ret.imm=stpk:r_u8()
  ret.pid=stpk:r_s32()
  ret.con=stpk:r_float()
  ret.none=stpk:r_stringZ()
  ret.extra_data=read_extra(stpk,size)
  return ret
end

function parse_item_packet(ret,stpk,updpk)
  ret.condition=stpk:r_float()
  ret.upgrades=readvu32stringZ(stpk)
  ret.upd_num_items=updpk:r_u8()
  ret.float_data_item_packet=read_float(updpk,19)
  ret.upd_ph_unknown=updpk:r_u8()
  return ret
end

function write_extra(pk,v)
	for i,k in ipairs(v) do
		pk:w_u8(k)
	end 
end

function read_extra(packet,size)
  local v={}
  for i=packet:r_tell(),size-1,1 do
	  table.insert(v,packet:r_u8())
  end
  return v
end

function write_float(pk,v)
	for i,k in ipairs(v) do
		pk:w_float(k)
	end 
end

function read_float(packet,size)
  local v={}
  for i=1,size,1 do
	  table.insert(v,packet:r_float())
  end
  return v
end

function write_bon(pk,v)
  if v==nil then v={} end
  for i=1,5,1 do
    pk:w_u8(v[i])
  end
end

function read_bon(packet)
  local v={}
  for i=1,5,1 do
    table.insert(v,packet:r_u8())
  end
  return v
end

function writevu32stringZ(pk,v)
  if v==nil then v={} end
  local len=#v
  pk:w_s32(len)
  for i=1,len,1 do
    pk:w_stringZ(v[i])
  end
end

function readvu32stringZ(packet)
  local v={}
  local len=packet:r_s32()
  for i=1,len,1 do
    table.insert(v,packet:r_stringZ())
  end
  return v
end
  
-- таблица параметров и id на входе
function write_stalker_params_new(ret,id,convert)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		uppk:w_begin(0)
		-- cse_alife_trader_abstract properties
		stpk:w_s32(ret.money)
		stpk:w_stringZ(ret.specific_character)
		stpk:w_s32(ret.trader_flags)
		stpk:w_stringZ(ret.character_profile)
		stpk:w_s32(ret.community_index)
		stpk:w_s32(ret.rank)
		stpk:w_s32(ret.reputation)
		stpk:w_stringZ(ret.character_name)
		-- cse_alife_object properties
		stpk:w_u16(ret.game_vertex_id)
		stpk:w_float(ret.distance)
		stpk:w_s32(ret.direct_control)
		stpk:w_s32(ret.level_vertex_id)
		stpk:w_s32(ret.object_flags)
		stpk:w_stringZ(ret.custom_data)
		stpk:w_s32(ret.story_id)
		stpk:w_s32(ret.spawn_story_id)
		-- cse_visual
		stpk:w_stringZ(ret.visual_name)
		write_extra(uppk,ret.upd_extra_data) 
		write_extra(stpk,ret.extra_data)
		local size=stpk:w_tell()
		stpk:r_seek(2)
		uppk:r_seek(2)
		sobj:STATE_Read(stpk,size)
		sobj:UPDATE_Read(uppk)
		local obj=level.object_by_id(id)
		if obj and convert then
			if convert == 1 then
				convert_npc[id]="turn_off"	
			end
			if convert == 2 then
				convert_npc[id]="turn_on"	
			end
		end
	end
end

    -- id на входе
function read_stalker_params_new(id)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		uppk:w_begin(0)
		sobj:STATE_Write(stpk)
		sobj:UPDATE_Write(uppk)
		local size=stpk:w_tell()
		local size1=uppk:w_tell()
		stpk:r_seek(2)
		uppk:r_seek(2)
		local ret = {}
		-- cse_alife_trader_abstract properties
		ret.money					= stpk:r_s32()
		ret.specific_character	= stpk:r_stringZ()
		ret.trader_flags			= stpk:r_s32()
		ret.character_profile	= stpk:r_stringZ()
		ret.community_index		= stpk:r_s32()
		ret.rank						= stpk:r_s32()
		ret.reputation				= stpk:r_s32()
		ret.character_name		= stpk:r_stringZ()
		-- cse_alife_object properties
		ret.game_vertex_id		= stpk:r_u16()
		ret.distance				= stpk:r_float()
		ret.direct_control		= stpk:r_s32()
		ret.level_vertex_id		= stpk:r_s32()
		ret.object_flags			= stpk:r_s32()
		ret.custom_data			= stpk:r_stringZ()
		ret.story_id				= stpk:r_s32()
		ret.spawn_story_id		= stpk:r_s32()
		-- cse_visual
		ret.visual_name			= stpk:r_stringZ()
		ret.upd_extra_data=read_extra(uppk,size)
		ret.extra_data=read_extra(stpk,size)
		return ret
	end
	return nil
end

    -- id на входе
function read_stalker_params_visual(id)
	local sobj = alife():object(id)
	if sobj then
		stpk:w_begin(0)
		sobj:STATE_Write(stpk) 
		stpk:r_seek(2)
		-- cse_alife_trader_abstract properties
		stpk:r_s32()
		stpk:r_stringZ()
		stpk:r_s32()
		stpk:r_stringZ()
		stpk:r_s32()
		stpk:r_s32()
		stpk:r_s32()
		stpk:r_stringZ()
		-- cse_alife_object properties
		stpk:r_u16()
		stpk:r_float()
		stpk:r_s32()
		stpk:r_s32()
		stpk:r_s32()
		stpk:r_stringZ()
		stpk:r_s32()
		stpk:r_s32()
		-- cse_visual
		return stpk:r_stringZ()
	end
	return nil
end

function get_weapon_data(sobj)
	if not sobj then
		return {}
	end
	stpk:w_begin(0)
	sobj:STATE_Write(stpk)
	local size = stpk:w_tell()
	stpk:r_seek(2)
	local t = {}
	parse_object_packet(t,stpk,size)
	parse_visual_packet(t,stpk,size)
	parse_item_packet(t,stpk,size)
	parse_item_weapon_packet(t,stpk,size)
	return t
end

function parse_item_weapon_packet(ret,stpk)
	ret.ammo_current = stpk:r_u16()
	ret.ammo_elapsed = stpk:r_u16()
	ret.weapon_state = stpk:r_u8()
	ret.addon_flags = stpk:r_u8()
	ret.ammo_type = stpk:r_u8()
	return ret
end

--/ -----------------------------------------------------------------
--/ ANOMALY
--/ -----------------------------------------------------------------
function Get_Data_Anomaly(soObj) --/ серверный объект на входе
	local iCid = soObj:clsid()

	
	if not (iCid and isAnomaly(soObj,iCid)) then
		printf("Get_Data_Anomaly:Obj=[%s],cid=[%s]~?:<%s>", soObj and soObj:name(), iCid, "Warning!")
		return {} --/> error
	end
	

	if iCid == clsid.zone_bfuzz_s or iCid == clsid.zone_bfuzz then
		return Get_Data_Zone_Visual(soObj) --/>
	elseif iCid == clsid.torrid_zone then --/ SHOC
		return Get_Data_Zone_Torrid(soObj) --/>
	else
		return Get_Data_Zone_Anom(soObj) --/>
	end
end
function Set_Data_Anomaly(tT,soObj) --/ таблица параметров и серверный объект на входе
	local iCid = soObj:clsid()
	if not (iCid and isAnomaly(soObj,iCid)) then
		printf("Set_Data_Anomaly:Obj=[%s],cid=[%s]~?:<%s>", soObj and soObj:name(), iCid, "Warning!")
		return false --/> error
	end
	if iCid == clsid.zone_bfuzz_s or iCid == clsid.zone_bfuzz then
		return Set_Data_Zone_Visual(tT,soObj) --/>
	elseif iCid == clsid.torrid_zone then --/ SHOC
		return Set_Data_Zone_Torrid(tT,soObj) --/>
	else
		return Set_Data_Zone_Anom(tT,soObj) --/>
	end
end
--/ -----------------------------------------------------------------
--/ ZONE ANOMALY (se_zone_anom)
--/ -----------------------------------------------------------------
function Parse_Packet_se_zone_anom(tT,oPs)
	Parse_Packet_cse_alife_anomalous_zone(tT,oPs)
	tT.last_spawn_time_present = oPs:r_u8()
	return tT
end
function Fill_Packet_se_zone_anom(tT,oPs)
	Fill_Packet_cse_alife_anomalous_zone(tT,oPs)
	oPs:w_u8(tT.last_spawn_time_present)
end

function Get_Data_Zone_Anom(soObj) --/ серверный объект на входе
	return Get_Object_Data(soObj,Parse_Packet_se_zone_anom,"ZoneAnom") --/>
end
function Set_Data_Zone_Anom(tT,soObj) --/ таблица параметров и серверный объект на входе
	return Set_Object_Data(tT,soObj,Fill_Packet_se_zone_anom,"ZoneAnom") --/>
end