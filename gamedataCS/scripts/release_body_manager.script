----------------------------------------------------------------------------------------------------
-- RELEASE BODY MANAGER ----------------------------------------------------------------------------
-- Made by Distemper -------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
-- Changed by Kirgudu & Charsi (08.08.15) ----------------------------------------------------------
----------------------------------------------------------------------------------------------------

local RB_manager = nil
local bodyKeepDuration = 15 * 60 * 1000 --/ 15 минут
local ignore_sections = {
	["stalker_petrenko"] = true,
	["marsh_dead_ecolog"] = true,
	["marsh_dead_ecolog_1"] = true,
	["mil_dead_killer"] = true,
	["agru_dead_stalker"] = true,
	["pri_dead_stalker"] = true,
	["yan_stalker_zombied_13"] = true,
	["neutral_bodies"] = true
}

class "Crelease_body"

function Crelease_body:__init()
	self.release_objects_table = {} -- таблица "СТЕК" трупов
	self.keep_items_table = {} -- таблица квестовых предметов
	self.current_object_id = 0 -- id только что убитого npc
	-- Итерируемся по списку квестовых итемов.
	local snd_ini = ini_file("misc\\death_generic.ltx")
	if not snd_ini:section_exist("keep_items") then
		abort("There is no section [keep_items] in death_generic.ltx")
	end
	local n = snd_ini:line_count("keep_items")
	local value = ""
	for i = 0, n - 1 do
		result, section, value = snd_ini:r_line("keep_items", i, "", "")
		table.insert(self.keep_items_table, section)
	end
end

function Crelease_body:moving_dead_body(obj)
	if self:inspection_result(obj) and ogsm.allow_release(obj:section()) == true then
		table.insert(self.release_objects_table, {id = obj:id(), clear_time = time_global() + bodyKeepDuration})
		self:try_to_release()
	end
end

function Crelease_body:try_to_release()
	local i, current_time = 1, time_global()
	local info = self.release_objects_table[i]
	while info ~= nil do
		if current_time > info.clear_time and bind_stalker.delayed_alife_release_objects[info.id] == nil then
			local object = alife():object(info.id)
			if object then
				if db.actor:position():distance_to(object.position) > 15 then
					ogsm.dbglog("release_body_manager_"..object:name())
					alife():release(object, true)
					table.remove(self.release_objects_table, i)
				else
					i = i + 1
				end
			else
				table.remove(self.release_objects_table, i)
			end
		else
			i = i + 1
		end
		info = self.release_objects_table[i]
	end
end

function Crelease_body:inspection_result(obj)
	for k in pairs(self.keep_items_table) do
		if obj:object(self.keep_items_table[k]) ~= nil then return false end
	end
	local sect = obj:section()
	if ignore_sections[sect] or obj:story_id() < 65535 or self:check_for_known_info(obj) then
		return false
	end
	return true
end

function Crelease_body:check_for_known_info(obj)
	local char_ini = ""
	local spawn_ini = obj:spawn_ini()
	local filename = nil
	if spawn_ini then
		filename = utils.cfg_get_string(spawn_ini, "logic", "cfg", obj, false, "")
	end
	if filename ~= nil then
		char_ini = ini_file(filename)
	else
		char_ini = obj:spawn_ini() or ini_file("scripts\\dummy.ltx")
	end
	local st = db.storage[obj:id()]
	local known_info = utils.cfg_get_string(char_ini, st.section_logic, "known_info", obj, false, "", nil) or "known_info"
	if char_ini:section_exist(known_info) then
		return true
	end
	return false
end

function Crelease_body:save(packet)
	set_save_marker(packet, "save", false, "Crelease_body")
	local count = #self.release_objects_table
	packet:w_u16(count)
	local current_time = time_global()
	for k,v in pairs(self.release_objects_table) do
		packet:w_u16(v.id)
		local clear_delay = v.clear_time - current_time
		if clear_delay < 0 then
			packet:w_u16(0)
		else
			packet:w_u16(clear_delay)
		end
	end
	local level_id = game_graph():vertex(alife():object(0).m_game_vertex_id):level_id()
	packet:w_u16(level_id)
	set_save_marker(packet, "save", true, "Crelease_body")
end

function Crelease_body:load(reader)
	set_save_marker(reader, "load", false, "Crelease_body")
	local count = reader:r_u16()
	self.release_objects_table = {}
	local current_time = time_global()
	for i = 1, count do
		local vid = reader:r_u16()
		local cd = reader:r_u16()
		if cd > bodyKeepDuration then cd = bodyKeepDuration end
		table.insert( self.release_objects_table, { id = vid, clear_time = current_time + cd } )
	end
	local level_id = reader:r_u16()
	set_save_marker(reader, "load", true, "Crelease_body")
end

function get_release_body_manager()
	if RB_manager == nil then
		RB_manager = Crelease_body()
	end
	return RB_manager
end