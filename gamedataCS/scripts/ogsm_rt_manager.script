----------------------- Copyright 2010-2015 Minister, Kirgudu -------------------------
----------------------------- Менеджер случайных заказов ------------------------------

local rt_manager = nil

local parent_by_story = {}
local story_by_parent = {}

-- Kirgudu
local ignore_smarts_for_ammo_task = {
	["mar_smart_terrain_csky_base"] = true,
	["mar_smart_terrain_11_11"] = true,
	["esc_smart_terrain_5_7"] = true,
	["esc_smart_terrain_6_8"] = true,
	["gar_smart_terrain_3_5"] = true,
	["val_smart_terrain_7_3"] = true,
	["val_smart_terrain_7_4"] = true,
	["val_smart_terrain_7_5"] = true,
	["agr_smart_terrain_1_6"] = true,
	["agr_smart_terrain_1_6_near_1"] = true,
	["agr_smart_terrain_1_6_near_2"] = true,
	["agr_smart_terrain_4_4"] = true,
	["agr_smart_terrain_4_4_near_1"] = true,
	["agr_smart_terrain_4_4_near_2"] = true,
	["agr_smart_terrain_4_4_near_3"] = true
}
-- Kirgudu

--Иконки для новостей по типу таска
local icon_by_type = {
	bring_artefact = "ui_iconsTotal_prinesti_artefact",
	bring_monster_part = "ui_iconsTotal_prinesti_chast_monstra",
	kill_stalker = "ui_iconsTotal_ubit_stalkera",
	eliminate_monster_lager = "ui_iconsTotal_ubit_mutanta",
	courier = "ui_iconsTotal_prinesti_pripasi",
	find_pda = "ui_iconsTotal_prinesti_pda",
	squad_courier = "ui_iconsTotal_prinesti_boekomplekt"
}

class "CRandomTask"
function CRandomTask:__init()
	self.task_ini = ini_file("misc\\rt_manager.ltx")
	self.task_phrase_id = 100

	self.squads = {}

	local id, value = "", ""
	local category = ""

	self.task_info = {}

	self.not_busy_priors = {}

	--Заполняем таблицы story_by_parent и parent_by_story
	for i = 0, self.task_ini:line_count("story_ids") - 1 do
		result, id, value = self.task_ini:r_line("story_ids", i, "", "")

		story_by_parent[id] = tonumber(value)
		parent_by_story[tonumber(value)] = id
	end

	for i = 0, self.task_ini:line_count("list") - 1 do
		result, id, value = self.task_ini:r_line("list", i, "", "")

		--Делаем проверку на существование заказчика (актуально для удалённого во фриплее Лебедева)
		local parent_name = self.task_ini:r_string(id, "parent")
		local parent = alife():story_object(story_by_parent[parent_name])
-- Kirgudu
		local type = self.task_ini:r_string(id, "type")
		local target_npc_object = nil
		local has_target = false
		local target_npc = utils.cfg_get_string(self.task_ini, id, "target_npc", nil, false, "")
		if target_npc ~= nil then
			target_npc = utils.parse_names(target_npc)
			if type == "courier" or type == "squad_courier" then
				target_npc = target_npc[1]
				target_npc_object = alife():story_object(story_by_parent[target_npc])
			end
			has_target = true
		end

		if is_dead(parent) then
			-- continue
		elseif (type == "courier" or type == "squad_courier") and is_dead(target_npc_object) then
			-- continue (для курьерских заданий на случай отсутствия поставщика)
		else
			self.task_info[id] = {}
			self.task_info[id].type = type
			self.task_info[id].name = id
			self.task_info[id].parent = parent_name
			self.task_info[id].parent_id = parent.id
			self.task_info[id].complex_type = self.task_info[id].type .. "_" .. self.task_info[id].parent
			self.task_info[id].target = self.task_ini:r_string(id, "target")
			self.task_info[id].description = self.task_ini:r_string(id, "description")
			self.task_info[id].idle_time = utils.cfg_get_number(self.task_ini, id, "idle_time", nil, false, 24*60*60*3) --время до выдачи квеста (в игровых секундах)
			self.task_info[id].time = utils.cfg_get_number(self.task_ini, id, "time", nil, false, 48*60*60*3) --время на выполнение задания (6 игровых суток)
			self.task_info[id].community = utils.cfg_get_string(self.task_ini, id, "community", nil, false, "")
			self.task_info[id].com_rel_fail = utils.cfg_get_number(self.task_ini, id, "community_relation_fail", nil, false, -50)
			self.task_info[id].com_rel_complete = utils.cfg_get_number(self.task_ini, id, "community_relation_complete", nil, false, 50)
			self.task_info[id].squad_community = utils.cfg_get_string(self.task_ini, id, "squad_community", nil, false, "")

			self.task_info[id].target_smart = utils.cfg_get_string(self.task_ini, id, "target_smart", nil, false, "")
			if self.task_info[id].target_smart ~= nil then
				self.task_info[id].target_smart = utils.parse_names(self.task_info[id].target_smart)
			end

			if has_target then
				self.task_info[id].target_npc = target_npc
				if type == "courier" or type == "squad_courier" then
					self.task_info[id].target_npc_id = target_npc_object.id
				end
			end
-- Kirgudu

			self.task_info[id].reward_items = utils.cfg_get_string(self.task_ini, id, "reward_items", nil, false, "")
			if self.task_info[id].reward_items ~= nil then
				self.task_info[id].reward_items = utils.parse_names(self.task_info[id].reward_items)
			end

			self.task_info[id].reward_money = utils.cfg_get_number(self.task_ini, id, "reward_money", nil, false)
			self.task_info[id].condlist = xr_logic.parse_condlist(db.actor, "rt_manager", "condlist", utils.cfg_get_string(self.task_ini, id, "condlist", nil, false, "", "true"))

			self.task_info[id].init_phrase_id = self:get_id()
			self.task_info[id].desc_phrase_id = self:get_id()
			self.task_info[id].yes_phrase_id = self:get_id()
-- Kirgudu
			self.task_info[id].order_phrase_id = self:get_id()
			self.task_info[id].yes2_phrase_id = self:get_id()
-- Kirgudu
			self.task_info[id].no_phrase_id = self:get_id()

			self.task_info[id].opt_time = time_global()
			self.task_info[id].opt_time2 = time_global()

			self.task_info[id].enabled = false
			self.task_info[id].status = "normal"	--xr_logic.parse_condlist(db.actor, "rt_manager", "status", utils.cfg_get_string(self.task_ini, id, "status", nil, false, "", "normal"))

			-- Kirgudu
			self.task_info[id].stalker_killer = nil
			-- Kirgudu
		end
	end

	self.current_parent_type_prior = {}
	self.task_id_by_type = {}
	self.task_id_by_parent = {}
	self.task_id_by_desc_phrase_id = {}
	self.task_id_by_yes_phrase_id = {}
	self.task_id_by_order_phrase_id = {}
	self.task_id_by_yes2_phrase_id = {}
	self.task_id_by_init_phrase_id = {}
	self.task_id_by_complex_type = {}
	self.active_type_by_parent = {}
	self.active_tasks = {}
	self.task_count_by_complex_type = {}

	for k,v in pairs(self.task_info) do
		if self.task_id_by_type[v.type] == nil then
			self.task_id_by_type[v.type] = {}
		end
		table.insert(self.task_id_by_type[v.type], k)

		if self.task_id_by_parent[v.parent] == nil then
			self.task_id_by_parent[v.parent] = {}
		end
		table.insert(self.task_id_by_parent[v.parent], k)

		if self.active_type_by_parent[v.parent] == nil then
			self.active_type_by_parent[v.parent] = {}
		end

		if self.task_count_by_complex_type[v.complex_type] == nil then
			self.task_count_by_complex_type[v.complex_type] = 0
		end
		self.task_count_by_complex_type[v.complex_type] = self.task_count_by_complex_type[v.complex_type] + 1

		self.task_id_by_desc_phrase_id[v.desc_phrase_id] = k
		self.task_id_by_yes_phrase_id[v.yes_phrase_id] = k
		self.task_id_by_order_phrase_id[v.order_phrase_id] = k
		self.task_id_by_yes2_phrase_id[v.yes2_phrase_id] = k
		self.task_id_by_init_phrase_id[v.init_phrase_id] = k
	end

	--Даем заданиям приоритеты
	for k,v in pairs(self.task_info) do
		v.prior = self:get_prior(v.complex_type, v.name)

		if self.task_id_by_complex_type[v.complex_type] == nil then
			self.task_id_by_complex_type[v.complex_type] = {}
		end

		self.task_id_by_complex_type[v.complex_type][v.prior] = v.name
	end
end

local number_by_status = { normal = 1, selected = 2, completed = 3, rewarded = 4, failed = 5, reversed = 6 }
local status_by_number = { [1] = "normal", [2] = "selected", [3] = "completed", [4] = "rewarded", [5] = "failed", [6] = "reversed" }

-- Kirgudu
-- удаление заданий от несуществующих НПС
function CRandomTask:check_dead()
	for k,v in pairs(self.task_info) do
		local npc = alife():object(v.parent_id)
		if is_dead(npc) then
			self:task_delete(k, v)
		elseif (v.type == "squad_courier" or v.type == "courier") and v.target_npc_id ~= nil then
			npc = alife():object(v.target_npc_id)
			if is_dead(npc) and
			   (v.status ~= "selected" or not v.selected_squad_id or v.selected_squad_id == nil or v.selected_squad_id == 0) then
				self:task_delete(k, v)
			end
		end
	end
end

function CRandomTask:task_delete(k, v)
	if v.status == "selected" then
		self:send_news(v.name, "reversed")
		self.active_tasks[v.name] = nil
		self.active_type_by_parent[v.parent][v.type] = nil
	end
	for kk,vv in pairs(self.task_id_by_type[v.type]) do
		if vv == k then table.remove(self.task_id_by_type[v.type], kk) end
	end
	self.task_id_by_parent[v.parent] = nil
	if self.task_count_by_complex_type[v.complex_type] == nil or self.task_count_by_complex_type[v.complex_type] == 0 then
		self.task_count_by_complex_type[v.complex_type] = 0
	else
		self.task_count_by_complex_type[v.complex_type] = self.task_count_by_complex_type[v.complex_type] - 1
	end
	self.task_id_by_desc_phrase_id[v.desc_phrase_id] = nil
	self.task_id_by_yes_phrase_id[v.yes_phrase_id] = nil
	self.task_id_by_order_phrase_id[v.order_phrase_id] = nil
	self.task_id_by_yes2_phrase_id[v.yes2_phrase_id] = nil
	self.task_id_by_init_phrase_id[v.init_phrase_id] = nil
	self.task_id_by_complex_type[v.complex_type][v.prior] = nil
	self.task_info[k] = nil
end
-- Kirgudu

function CRandomTask:save(packet)
	self:check_dead()

	local counter = 0
	for k,v in pairs(self.task_info) do
		if v.status ~= "normal" or (v.status == "normal" and v.last_task_time ~= nil and game.get_game_time():diffSec(v.last_task_time) < v.idle_time) or self.current_parent_type_prior[v.complex_type] == v.prior then
			v.to_save = true
			counter = counter + 1
		end
	end
	packet:w_u8(counter)
	for k,v in pairs(self.task_info) do
		if v.to_save == true then
			packet:w_stringZ(k)
			packet:w_u8(number_by_status[v.status])
			packet:w_bool(self.current_parent_type_prior[v.complex_type] == v.prior)
			packet:w_u16(v.selected_target or 0)
			if v.type == "find_pda" then
				packet:w_u16(v.selected_target_smart or 0)
			elseif v.type == "squad_courier" then
				packet:w_stringZ(v.selected_squad_id or 0)
			end
			utils.w_CTime(packet, v.last_task_time)
			v.to_save = false
		end
	end
end

function CRandomTask:load(reader)
	local counter = reader:r_u8()
	for i = 1, counter do
		local id = reader:r_stringZ()
		if not self.task_info[id] then self.task_info[id] = {} end

		self.task_info[id].status = status_by_number[reader:r_u8()]

		local cur = reader:r_bool()
		if cur == true and self.task_info[id].complex_type ~= nil then
			self.current_parent_type_prior[self.task_info[id].complex_type] = self.task_info[id].prior
		end

		local selected_target = reader:r_u16()
		if selected_target ~= 0 then
			self.task_info[id].selected_target = selected_target
		end

		if self.task_info[id].type == "find_pda" then
			local selected_target_smart = reader:r_u16()
			if selected_target_smart ~= 0 then
				self.task_info[id].selected_target_smart = selected_target_smart
			end
		elseif self.task_info[id].type == "squad_courier" then
			local selected_squad_id = reader:r_stringZ()
			if selected_squad_id ~= "0" then
				self.task_info[id].selected_squad_id = selected_squad_id
			end
		end

		self.task_info[id].last_task_time = utils.r_CTime(reader)

		if not self.task_info[id].name then self.task_info[id] = nil end --если у таска нет name, то это явно уже удаленный квест, так что убираем его из списка
	end

	for k,v in pairs(self.task_info) do
		if v.status ~= "normal" then
			self.active_tasks[k] = true
			self.active_type_by_parent[v.parent][v.type] = true
		end
	end
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

--Создание диалога просмотра/выдачи тасков
function CRandomTask:init_task_dialog(dlg, parent)
	local phr = dlg:AddPhrase("rt_actor_seek_new_job", 0, "", -10000)
	local phrase_script = phr:GetPhraseScript()

	phr = dlg:AddPhrase("rt_"..parent.."_need_help", 1, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("ogsm_rt_manager.action_task_show")
	phrase_script:AddPrecondition("ogsm_rt_manager.precondition_vendor_can_task")

	phr = dlg:AddPhrase("rt_"..parent.."_dont_need_help", 2, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddPrecondition("ogsm_rt_manager.precondition_vendor_cannot_task")

	for k,v in pairs(self.task_id_by_parent[parent]) do
		phr = dlg:AddPhrase(self.task_info[v].name, self.task_info[v].init_phrase_id, 1, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddPrecondition("ogsm_rt_manager.precondition_task_avail")

		phr = dlg:AddPhrase("NO TEXT", self.task_info[v].desc_phrase_id, self.task_info[v].init_phrase_id, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:SetScriptText("ogsm_rt_manager.infa_o_taske")

		phr = dlg:AddPhrase("rt_actor_yes", self.task_info[v].yes_phrase_id, self.task_info[v].desc_phrase_id, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("ogsm_rt_manager.action_give_task")

-- Kirgudu
		if self.task_info[v].type == "squad_courier" then
			phr = dlg:AddPhrase("rt_"..parent.."_order", self.task_info[v].order_phrase_id, self.task_info[v].yes_phrase_id, -10000)
			phrase_script = phr:GetPhraseScript()

			phr = dlg:AddPhrase("rt_actor_yes2", self.task_info[v].yes2_phrase_id, self.task_info[v].order_phrase_id, -10000)
			phrase_script = phr:GetPhraseScript()
		end
-- Kirgudu

		phr = dlg:AddPhrase("rt_actor_no", self.task_info[v].no_phrase_id, self.task_info[v].desc_phrase_id, -10000)
	end
	dlg:AddPhrase("rt_actor_not_interested", 3, 1, -10000)
end

--Создание диалога завершения таска
function CRandomTask:init_reward_dialog(dlg, parent)
	local phr = dlg:AddPhrase("rt_actor_reward_job", 0, "", -10000)
	local phrase_script = phr:GetPhraseScript()

	phr = dlg:AddPhrase("rt_"..parent.."_job_complete", 1, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("ogsm_rt_manager.action_task_reward")
	phrase_script:AddPrecondition("ogsm_rt_manager.precondition_have_completed_job")

	phr = dlg:AddPhrase("rt_"..parent.."_job_ask", 2, 0, -10000)
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddPrecondition("ogsm_rt_manager.precondition_dont_have_completed_job")

	for k,v in pairs(self.task_id_by_parent[parent]) do
		phr = dlg:AddPhrase(self.task_info[v].name, self.task_info[v].init_phrase_id, 2, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddPrecondition("ogsm_rt_manager.precondition_active_task")

		phr = dlg:AddPhrase("rt_"..parent.."_job_what", self.task_info[v].desc_phrase_id, self.task_info[v].init_phrase_id, -10000)

		phr = dlg:AddPhrase("rt_actor_job_refuse", self.task_info[v].yes_phrase_id, self.task_info[v].desc_phrase_id, -10000)
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddAction("ogsm_rt_manager.action_refuse_task")

		phr = dlg:AddPhrase("rt_actor_job_nothing", self.task_info[v].no_phrase_id, self.task_info[v].desc_phrase_id,-10000)
	end
	phr = dlg:AddPhrase("rt_actor_job_nothing", 3, 2, -10000)
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

--Выдача задания
function CRandomTask:action_give_task(actor, npc, dialog_id, phrase_id)
	local task = CGameTask()
	local task_desc = self.task_info[self.task_id_by_yes_phrase_id[tonumber(phrase_id)]]

	task:set_id(task_desc.name)
	task:set_title(game.translate_string(task_desc.name))
	task:set_icon_name("ui_pda2_mtask_overlay")
	task:set_description(infa_o_taske(nil, npc, nil, nil, task_desc.name, true))
	task:set_type(1)

	task:add_complete_func("ogsm_rt_manager.task_complete")
	task:add_fail_func("ogsm_rt_manager.task_fail")

	task:set_map_hint(task_desc.name)
	if task_desc.type == "kill_stalker" then
		task_desc.selected_target = task_desc.target_objects[math.random(#task_desc.target_objects)]
		task:set_map_location("secondary_task_location_complex_eliminate_squad")
		task:set_map_object_id(task_desc.selected_target)
-- Kirgudu
		task_desc.stalker_killer = nil
-- Kirgudu
	elseif task_desc.type == "eliminate_monster_lager" then
		local smart_id = sim_board.get_sim_board().smarts_by_names[task_desc.target].id
		task:set_map_location("secondary_task_location_complex_eliminate_mutant_squad")
		task:set_map_object_id(smart_id)
	elseif task_desc.type == "squad_courier" then
-- Kirgudu
		task:set_map_location("secondary_task_location_complex_recover_item")
		task:set_title(game.translate_string("rt_take_ammo_from_trader"))
		task:set_map_object_id(task_desc.target_npc_id)
		task_desc.selected_target = nil
		task_desc.selected_squad_id = nil
		task_desc.dialog_flag = false
-- Kirgudu
	elseif task_desc.type == "find_pda" then
		task:set_map_location("secondary_task_location_complex_recover_item")
		task:set_map_object_id(task_desc.selected_target_smart)
	elseif task_desc.type == "courier" then
		task:set_map_location("secondary_task_location_complex_recover_item")
		task:set_map_object_id(task_desc.target_npc_id)
	else
		task:set_map_location("secondary_task_location_complex_take_reward")
		task:set_map_object_id(task_desc.parent_id)
	end

	task_desc.status = "selected"

	db.actor:give_task(task, task_desc.time, false)
	self:send_news(task_desc.name, "new")

	self.active_tasks[task_desc.name] = true
	self.active_type_by_parent[task_desc.parent][task_desc.type] = true
end

--Проверка завершенности таска
--Если ф-ия вернет true, то таск будет считаться выполненным
function CRandomTask:task_complete(task_id)
	local task_desc = self.task_info[task_id]
	local task = db.actor:get_task(task_id, true)

	if task_desc == nil then return end

	--Типа оптимизация
	if time_global() <= task_desc.opt_time then return false else task_desc.opt_time = task_desc.opt_time + 700 end

	if task_desc.status == "rewarded" or task_desc.status == "reversed" then
		return true
	end

-- Kirgudu
	-- если умер заказчик любого задания, задание отменяем, а не фейлим
	local npc_dead = is_dead(alife():object(task_desc.parent_id))
	if npc_dead and (task_desc.status == "selected" or task_desc.status == "completed") then -- and task_desc.type == "squad_courier"
		task_desc.status = "reversed"
		return true
	end

	if task_desc.type == "bring_artefact" and task_desc.status ~= "rewarded" then
		if db.actor:object(task_desc.target) and task_desc.status ~= "completed" then
			task_desc.status = "completed"
			task:set_title(game.translate_string("rt_return_artefact_to_customer"))
			self:send_news(task_desc.name, "update")
		elseif not db.actor:object(task_desc.target) and task_desc.status == "completed" then
			task_desc.status = "selected"
			task:set_title(game.translate_string(task_desc.name))
			self:send_news(task_desc.name, "update")
		end

	elseif task_desc.type == "bring_monster_part" and task_desc.status ~= "rewarded" then
		if db.actor:object(task_desc.target) and task_desc.status ~= "completed" then
			task_desc.status = "completed"
			task:set_title(game.translate_string("rt_return_monster_part_to_customer"))
			self:send_news(task_desc.name, "update")
		elseif not db.actor:object(task_desc.target) and task_desc.status == "completed" then
			task_desc.status = "selected"
			task:set_title(game.translate_string(task_desc.name))
			self:send_news(task_desc.name, "update")
		end

	elseif task_desc.type == "kill_stalker" and task_desc.status ~= "completed" then
		local npc = alife():object(task_desc.selected_target)
		if not npc or npc == nil or (npc and npc.alive and not npc:alive()) then
-- Kirgudu
			-- Делаем проверку на признак того, что цель задания уничтожена главным героем
			if not task_desc.stalker_killer or task_desc.stalker_killer == nil or task_desc.stalker_killer ~= "Scar" then
				task_desc.status = "reversed"
				return true
			end
-- Kirgudu

			task_desc.status = "completed"
			task:change_map_location("secondary_task_location_complex_take_reward", task_desc.parent_id)
			task:set_title(game.translate_string("rt_back_for_reward"))
			self:send_news(task_desc.name, "update")
		end

	elseif task_desc.type == "eliminate_monster_lager" and task_desc.status ~= "completed" then
		local sim_board = sim_board.get_sim_board()
		local smart = sim_board.smarts_by_names[task_desc.target]
		if sim_board:get_smart_player(smart) ~= "monster" then
			task_desc.status = "completed"
			task:change_map_location("secondary_task_location_complex_take_reward", task_desc.parent_id)
			task:set_title(game.translate_string("rt_back_for_reward"))
			self:send_news(task_desc.name, "update")
		end

	elseif task_desc.type == "courier" and task_desc.status == "selected" then
		if db.actor:object(task_desc.target) then
			task_desc.status = "completed"
			task:change_map_location("secondary_task_location_complex_take_reward", task_desc.parent_id)
			task:set_title(game.translate_string("rt_return_packet_to_customer"))
			self:send_news(task_desc.name, "update")
		end

	elseif task_desc.type == "squad_courier" and task_desc.status == "selected" then
-- Kirgudu
		if not task_desc.selected_squad_id or task_desc.selected_squad_id == nil or task_desc.selected_squad_id == 0 then
			local target_npc_object = alife():story_object(story_by_parent[task_desc.target_npc])
			if is_dead(target_npc_object) then
				task_desc.status = "reversed"
				return true
			end
		else
			local squad = sim_board.get_sim_board().squads[task_desc.selected_squad_id]
			if not squad or squad == nil or (squad and not squad.squad_alive) then
				task_desc.status = "failed"
				return
			end
			if task_desc.selected_target ~= squad.commander_id then
				task:change_map_location("secondary_task_location_complex_take_reward", squad.commander_id)
				task_desc.selected_target = squad.commander_id
				task_desc.dialog_flag = false
			end
			if not task_desc.dialog_flag then
				local function change_start_dlg(id, npc)
					npc:set_start_dialog("rt_to_squad")
				end
				level.client_spawn_manager():add(task_desc.selected_target, 0, change_start_dlg)
				task_desc.dialog_flag = true
			end
		end
-- Kirgudu

	elseif task_desc.type == "find_pda" and task_desc.status == "selected" and task_desc.selected_target then
		local pda = alife():object(task_desc.selected_target)
		if ogsm.dbgset then level.map_add_object_spot_ser(pda.id, "red_location", "PDA") end

		if not pda then
			task_desc.status = "failed"
			return
		end

		if pda and pda.parent_id == 0 then
			task_desc.status = "completed"
			task:change_map_location("secondary_task_location_complex_take_reward", task_desc.parent_id)
			task:set_title(game.translate_string("rt_return_pda_to_customer"))
			self:send_news(task_desc.name, "update")
		end
	end

	return false
end

--Проверка зафейлиности :) таска
--Если ф-ия вернет true, то таск будет считаться проваленным
function CRandomTask:task_fail(task_id)
	local task_desc = self.task_info[task_id]
	if task_desc == nil then return end

	--Типа оптимизация
	if time_global() <= task_desc.opt_time2 then return false else task_desc.opt_time2 = task_desc.opt_time2 + 700 end

	if task_desc.status == "failed" or task_desc.status == "reversed" then
		return true
	end

-- Kirgudu
	-- если умер заказчик любого задания, задание отменяем, а не фейлим
	local npc_dead = is_dead(alife():object(task_desc.parent_id))
	if npc_dead and (task_desc.status == "selected" or task_desc.status == "completed") then -- and task_desc.type == "squad_courier"
		task_desc.status = "reversed"
		return
	end

	-- если умер торговец до того, как взяли у него посылку для отряда, задание отменяем, а не фейлим
	if not npc_dead and task_desc.type == "squad_courier" and task_desc.target_npc_id ~= nil and task_desc.status == "selected" and
	   (not task_desc.selected_squad_id or task_desc.selected_squad_id == nil or task_desc.selected_squad_id == 0) then
		if is_dead(alife():object(task_desc.target_npc_id)) then
			task_desc.status = "reversed"
			return
		end
	end

	-- если умер отряд для доставки боеприпасов, задание фейлим (не успели помочь)
	if task_desc.type == "squad_courier" and task_desc.status == "selected" and task_desc.selected_squad_id and task_desc.selected_squad_id ~= nil and task_desc.selected_squad_id ~= 0 then
		local squad = sim_board.get_sim_board().squads[task_desc.selected_squad_id]
		if not squad or squad == nil or (squad and not squad.squad_alive) then
			task_desc.status = "failed"
			return true
		end
	end

	return npc_dead
-- Kirgudu
end

function CRandomTask:task_callback(_task, _state)
	local task_desc = self.task_info[_task:get_id()]
	local delta = 0

	if _state ~= task.completed and _state ~= task.fail then
		return
	end

	if task_desc.status == "reversed" then
		task_desc.status = "normal"
		self:send_news(task_desc.name, "reversed")
		task_desc.last_task_time = game.get_game_time()
		self.active_tasks[task_desc.name] = nil
		self.active_type_by_parent[task_desc.parent][task_desc.type] = nil
		return
	end

	if _state == task.fail then
		xr_statistic.inc_failed_quests_counter()
		delta = task_desc.com_rel_fail
		self:send_news(task_desc.name, "fail")
	elseif _state == task.completed then
		xr_statistic.inc_completed_quests_counter()
		delta = task_desc.com_rel_complete
		self:send_news(task_desc.name, "completed")
	end

	task_desc.status = "normal"
	task_desc.last_task_time = game.get_game_time()
	self.active_type_by_parent[task_desc.parent][task_desc.type] = nil
	self.active_tasks[task_desc.name] = nil
	if task_desc.type == "find_pda" then
		task_desc.selected_target = nil
		task_desc.selected_target_smart = nil
	end
	if task_desc.community then --меняем отношение только если указано community
		local relation = db.actor:community_goodwill(task_desc.community) + delta
		if relation > 1000 then
			relation = 1000
		elseif relation <- 3000 then
			relation = -3000
		end
		db.actor:set_community_goodwill(task_desc.community, relation)
	end
end

--Спаун трупа с ПДА (для типа квеста find_pda)
function CRandomTask:spawn_corpse_pda(task_id)
	local task_desc = self.task_info[task_id]

	local smart

	if task_desc.selected_target_smart == nil then
		smart = sim_board.get_sim_board().smarts_by_names[task_desc.target_smart[math.random(#task_desc.target_smart)]]
		task_desc.selected_target_smart = smart.id
	else
		smart = alife():object(task_desc.selected_target_smart)
	end

	local actor_loc = game_graph():vertex(alife():actor().m_game_vertex_id):level_id()
	local smart_loc = game_graph():vertex(smart.m_game_vertex_id):level_id()

	--Пока спаун трупа происходит только когда актор на одной локации вместе со смарттеррейном
	if actor_loc == smart_loc then
		local vector_direction = vector():set(math.random(-100, 100), 0, math.random(-100, 100))
		local vector = level.vertex_in_direction(smart.m_level_vertex_id, vector_direction, math.random(40, 100))
		local vector_position = level.vertex_position(vector)

		local npc = ogsm_packet.spawn_stalker(task_desc.target_npc[math.random(#task_desc.target_npc)], vector_position, vector, smart.m_game_vertex_id, "dead")

--		local npc = alife():create(task_desc.target_npc[math.random(#task_desc.target_npc)], vector_position, vector, smart.m_game_vertex_id)
--		npc:on_death()

		local pda = alife():create(task_desc.target, npc.position, npc.m_level_vertex_id, npc.m_game_vertex_id, npc.id)
		task_desc.selected_target = pda.id
	end
end

-- Kirgudu
-- Получаем посылку (для квеста по доставке продуктов)
function CRandomTask:take_food_packet(npc, actor)
	local parent = self:get_parent(npc)
	local task_desc = {}

	for k,v in pairs(self.task_id_by_type["courier"]) do
		task_desc = self.task_info[v]
		if task_desc.target_npc == parent and task_desc.status == "selected" then
			dialogs.relocate_item_section(npc, task_desc.target, "in")
		end
	end
end

-- Получаем посылку (для квеста по доставке боеприпасов)
function CRandomTask:take_ammo_packet(npc, actor)
	local parent = self:get_parent(npc)
	local task_desc = {}
	local task = nil

	for k,v in pairs(self.task_id_by_type["squad_courier"]) do
		if self.task_info[v].target_npc == parent then
			task_desc = self.task_info[v]
			--/ проверка на то, что квест - от нужного работодателя (по выполнению условий)
			if xr_logic.pick_section_from_condlist(db.actor, db.actor, task_desc.condlist) == "true" then
				task = db.actor:get_task(v, true)
				break
			end
		end
	end

	dialogs.relocate_item_section(npc, task_desc.target, "in")
	task_desc.dialog_flag = false

	local squads = self:squads_by_faction(task_desc.squad_community)
	local squad = squads[math.random(#squads)]
	task_desc.selected_target = squad.commander_id
	task_desc.selected_squad_id = squad.squad_id

	task:change_map_location("secondary_task_location_complex_take_reward", squad.commander_id)
	task:set_title(game.translate_string("rt_deliver_ammo_to_squad"))
	self:send_news(task_desc.name, "update")
end
-- Kirgudu

--Выдача награды за квест и прочее
function CRandomTask:task_reward(npc, actor)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.active_tasks) do
		local task_desc = self.task_info[k]
		if task_desc.status == "completed" and task_desc.parent == parent then
			if task_desc.type == "courier" and not db.actor:object(task_desc.target) then
				return
			end

			task_desc.status = "rewarded"

			if task_desc.type == "bring_artefact" or task_desc.type == "bring_monster_part" then
				dialogs.relocate_item_section(npc, task_desc.target, "out")
			elseif task_desc.type == "courier" then
				dialogs.relocate_item_section(npc, task_desc.target, "out")
			elseif task_desc.type == "find_pda" then
				db.actor:transfer_item(level.object_by_id(task_desc.selected_target), npc) --ф-ии для передачи передачи предмета по id в dialogs.script нету, поэтому трансферим и отсылаем новости сами
				news_manager.relocate_item(db.actor, "out", "pda_for_quests", 1)
			end

			if task_desc.reward_money ~= nil then
				dialogs.relocate_money(npc, task_desc.reward_money, "in")
			end

			if task_desc.reward_items ~= nil then
				for kk,vv in pairs(task_desc.reward_items) do
					dialogs.relocate_item_section(npc, vv, "in")
				end
			end
		end
	end
end

--Отсылка новостей о начале, обновлении, завершении таска
--В таблице содержатся заголовки новостей
local news_title = {
	fail = "rt_task_failed",
	completed = "rt_task_completed",
	new = "rt_task_new",
	update = "rt_task_update",
	reversed = "rt_task_reversed"
}
function CRandomTask:send_news(task_name, type)
	local task_desc = self.task_info[task_name]
	xr_sound.set_sound_play(db.actor:id(), "pda_task")
	db.actor:give_game_news(game.translate_string(news_title[type]), game.translate_string(task_desc.name), icon_by_type[task_desc.type], 0, 5000, 1)
	if db.actor:is_talking() then db.actor:give_talk_message2(game.translate_string(news_title[type]), game.translate_string(task_desc.name), icon_by_type[task_desc.type]) end
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

--"Генератор" ID для фраз
function CRandomTask:get_id()
	self.task_phrase_id = self.task_phrase_id + 1
	return self.task_phrase_id
end

--"Генератор" приоритетов для тасков
function CRandomTask:get_prior(complex_type, name)
	if self.not_busy_priors[complex_type] == nil then
		local count = self.task_count_by_complex_type[complex_type]
		self.not_busy_priors[complex_type] = {}
		for i = 1, count do
			table.insert(self.not_busy_priors[complex_type], i)
		end
	end

	return table.remove(self.not_busy_priors[complex_type], math.random(#self.not_busy_priors[complex_type]))
end


--Возвращает идентификатор вендора
function CRandomTask:get_parent(npc)
	return parent_by_story[npc:story_id()]
end

--Есть ли у игрока хоть одно задание от данного вендора
function CRandomTask:active_parent_task(actor, npc)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.active_tasks) do
		if self.task_info[k].parent == parent then
			return true
		end
	end
	return false
end

--Есть ли у игрока завершенные задания (которые осталось только сдать)
function CRandomTask:have_completed_job(actor, npc)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.active_tasks) do
		local task_desc = self.task_info[k]
		if task_desc.parent == parent and
		   task_desc.status == "completed"
		then
			if task_desc.type ~= "courier" or
			(task_desc.type == "courier" and db.actor:object(task_desc.target)) then
				return true
			end
		end
	end
	return false
end

--Отказ от таска
function CRandomTask:action_refuse_task(actor, npc, p1, p2)
	local task_desc = self.task_info[self.task_id_by_yes_phrase_id[tonumber(p2)]]
	task_desc.status = "failed"
end

--Выводит в диалоге список доступных квестов НПСа
function CRandomTask:action_task_show(npc, actor)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.task_id_by_parent[parent]) do
		if self:task_avail(actor, npc, nil, nil, self.task_info[v].init_phrase_id) then
			db.actor:give_talk_message2("", game.translate_string(self.task_info[v].name), icon_by_type[self.task_info[v].type], "iconed_answer_item")
		end
	end
end

--Проверка имеет ли НПС доступные квесты
function CRandomTask:parent_can_task(actor, npc, p1, p2, p3)
	local parent = self:get_parent(npc)
	for k,v in pairs(self.task_id_by_parent[parent]) do
		if self:task_avail(actor, npc, nil, nil, self.task_info[v].init_phrase_id) then
			return true
		end
	end
	return false
end

--Проверка доступен ли данный таск для выдачи
function CRandomTask:task_avail(actor, npc, p1, p2, p3)
	local task_desc = self.task_info[self.task_id_by_init_phrase_id[p3]]
	if task_desc.status ~= "normal" then return false end
	self:check_task_props(self.task_id_by_init_phrase_id[p3])

	if task_desc.enabled == true then
		for k,v in pairs(self.task_id_by_complex_type[task_desc.complex_type]) do
			local task = self.task_info[v]
			self:check_task_props(task.name)
			if task.enabled and (self.current_parent_type_prior[task.complex_type] == nil or
				not self:check_task_props(self.task_id_by_complex_type[task.complex_type][self.current_parent_type_prior[task.complex_type]]))
			then
				self.current_parent_type_prior[task.complex_type] = task.prior
			end
		end
	end

	return task_desc.enabled == true and self.current_parent_type_prior[task_desc.complex_type] == task_desc.prior
end

--Проверка активен ли таск
function CRandomTask:active_task(actor, npc, p1, p2, p3)
	return self.active_tasks[self.task_id_by_init_phrase_id[tonumber(p3)]] ~= nil
end

--Проверка свойств таска
function CRandomTask:check_task_props(task_id)
	local task_desc = self.task_info[task_id]
	task_desc.enabled = false

	if self.active_type_by_parent[task_desc.parent][task_desc.type] == true then
		task_desc.enabled = false
		return task_desc.enabled
	end

	if xr_logic.pick_section_from_condlist(db.actor, db.actor, task_desc.condlist) == nil then
		task_desc.enabled = false
		return task_desc.enabled
	end

	if task_desc.last_task_time ~= nil and
		game.get_game_time():diffSec(task_desc.last_task_time) < task_desc.idle_time
	then
		task_desc.enabled = false
		return task_desc.enabled
	end

	if task_desc.type == "eliminate_monster_lager" then
		local sim_board = sim_board.get_sim_board()
		local smart = sim_board.smarts_by_names[task_desc.target]
		task_desc.enabled = sim_board:get_smart_player(smart) == "monster"
	elseif task_desc.type == "bring_artefact" or task_desc.type == "bring_monster_part" then
		task_desc.enabled = true
	elseif task_desc.type == "courier" then
		task_desc.enabled = true
	elseif task_desc.type == "kill_stalker" then
		if task_desc.target_objects == nil then
			task_desc.enabled = false
			return task_desc.enabled
		end
		for k,v in pairs(task_desc.target_objects) do
			local obj = alife():object(v)
			if obj ~= nil and obj:alive() == true then
				task_desc.enabled = true
			else
				table.remove(task_desc.target_objects, k)
			end
		end
	elseif task_desc.type == "find_pda" then
		if task_desc.selected_target == nil or not alife():object(task_desc.selected_target) then
			self:spawn_corpse_pda(task_id)
		end
		task_desc.enabled = true
	elseif task_desc.type == "squad_courier" then
-- Kirgudu
		-- поскольку выдача этого задания осуществляется через промежуточного НПС (торговца), проверяем его существование
		if task_desc.target_npc_id == nil then
			task_desc.enabled = false
			return task_desc.enabled
		end
		local target_npc = alife():object(task_desc.target_npc_id)
		if not target_npc or target_npc == nil or (target_npc.alive and not target_npc:alive()) then
			task_desc.enabled = false
			return task_desc.enabled
		end
-- Kirgudu

		-- проверяем наличие доступных отрядов
		if self:squads_by_faction(task_desc.squad_community) == nil then
			task_desc.enabled = false
			return task_desc.enabled
		end
		task_desc.enabled = true
	end

	return task_desc.enabled
end

--Регистрация целей для тасков типа kill_stalker
function CRandomTask:register_target(obj)
	if IsStalker(obj) then
		for k,v in pairs(self.task_id_by_type["kill_stalker"]) do
			if obj.alive ~= nil and obj:alive() == true and
				obj:profile_name() == self.task_info[v].target
			then
				if self.task_info[v].target_objects == nil then
					self.task_info[v].target_objects = {}
				end
				table.insert(self.task_info[v].target_objects, obj.id)
			end
		end
	end
end

--Возвращает таблицу со сквадами по группировке (нужно для квестов типа squad_courier)
function CRandomTask:squads_by_faction(faction)
-- Kirgudu
	local board = sim_board.get_sim_board()
	local squads = board.squads
	local faction_squads = {}
	local actor_pos = db.actor:position()
	for k,v in pairs(squads) do
		if v.commander_id then
			local commander_obj = alife():object(v.commander_id)
			if commander_obj and commander_obj.position then
				local smart_name = board.smarts[v.smart_id].smrt:name()
				-- printff("squad_courier::> smart=[%s], ignore=[%s], pos=[%s], dist=[%s]", smart_name, ignore_smarts_for_ammo_task[smart_name], commander_obj.position, actor_pos:distance_to(commander_obj.position))
				if v.player_id == faction and ignore_smarts_for_ammo_task[smart_name] ~= true and actor_pos:distance_to(commander_obj.position) > 30 then
					table.insert(faction_squads, v)
				end
			end
		end
	end
-- Kirgudu
	return faction_squads
end

--Вызывается при загрузке игры
function CRandomTask:on_load()
	--Проспаунить труп с ПДА (для заданий типа find_pda) если надо
	for k,v in pairs(self.active_tasks) do
		local task_desc = self.task_info[k]

		if task_desc.type == "find_pda" and
		   task_desc.status == "selected" and
		   task_desc.selected_target == nil
		then
			self:spawn_corpse_pda(k)
		end
	end
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

function init_holod_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "holod")
end
function init_holod_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "holod")
end

function init_kalancha_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "kalancha")
end
function init_kalancha_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "kalancha")
end

function init_sidor_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "sidor")
end
function init_sidor_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "sidor")
end

function init_otec_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "otec")
end
function init_otec_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "otec")
end

function init_shilov_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "shilov")
end
function init_shilov_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "shilov")
end

function init_lebedev_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "lebedev")
end
function init_lebedev_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "lebedev")
end

function init_saharov_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "saharov")
end
function init_saharov_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "saharov")
end

function init_yoga_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "yoga")
end
function init_yoga_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "yoga")
end

function init_borov_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "borov")
end
function init_borov_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "borov")
end

function init_krilov_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "krilov")
end
function init_krilov_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "krilov")
end

function init_kolobok_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "kolobok")
end
function init_kolobok_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "kolobok")
end

function init_chehov_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "chehov")
end
function init_chehov_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "chehov")
end

function init_ganzha_task_dialog(dlg)
	get_rt_manager():init_task_dialog(dlg, "ganzha")
end
function init_ganzha_reward_dialog(dlg)
	get_rt_manager():init_reward_dialog(dlg, "ganzha")
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

function action_task_reward(actor, npc)
	get_rt_manager():task_reward(actor, npc)
end

function action_take_food_packet(npc, actor)
	get_rt_manager():take_food_packet(npc, actor)
end

-- Kirgudu
function action_take_ammo_packet(npc, actor)
	get_rt_manager():take_ammo_packet(npc, actor)
end
-- Kirgudu

function action_task_show(npc, actor)
	get_rt_manager():action_task_show(npc, actor)
end

function action_give_task(actor, npc, dialog_id, phrase_id)
	get_rt_manager():action_give_task(actor, npc, dialog_id, phrase_id)
end

function action_refuse_task(npc, actor, p1, p2)
	get_rt_manager():action_refuse_task(npc, actor, p1, p2)
end

function precondition_have_completed_job(npc, actor)
	return get_rt_manager():have_completed_job(actor, npc)
end

function precondition_dont_have_completed_job(npc, actor)
	return not get_rt_manager():have_completed_job(actor, npc)
end

function has_active_vendor_task(actor, npc)
	return get_rt_manager():active_parent_task(actor, npc)
end

function precondition_vendor_can_task(npc, actor, p1, p2, p3)
	return get_rt_manager():parent_can_task(actor, npc, p1, p2, p3)
end

function precondition_vendor_cannot_task(npc, actor, p1, p2, p3)
	return not get_rt_manager():parent_can_task(actor, npc, p1, p2, p3)
end

function precondition_task_avail(actor, npc, p1, p2, p3)
	return get_rt_manager():task_avail(actor, npc, p1, p2, tonumber(p3))
end

function precondition_active_task(actor, npc, p1, p2, p3)
	return get_rt_manager():active_task(actor, npc, p1, p2, p3)
end

function precondition_courier(actor, npc)
	for k,v in pairs(get_rt_manager().active_tasks) do
		local task_desc = get_rt_manager().task_info[k]
		if task_desc.type == "courier" and
		   task_desc.target_npc == get_rt_manager():get_parent(npc) and
		   task_desc.status == "selected"
		then
		   return true
		end
	end
	return false
end

-- Kirgudu
function precondition_squad_courier(actor, npc)
	for k,v in pairs(get_rt_manager().active_tasks) do
		local task_desc = get_rt_manager().task_info[k]
		if task_desc.type == "squad_courier" and
		   task_desc.target_npc == get_rt_manager():get_parent(npc) and
		   task_desc.status == "selected" and
		   (not task_desc.selected_squad_id or task_desc.selected_squad_id == nil or task_desc.selected_squad_id == 0)
		then
		   return true
		end
	end
	return false
end
-- Kirgudu

--"Создание" описания для тасков
function infa_o_taske(actor, npc, p1, p2, name, for_hint)
	local task_name = (get_rt_manager().task_id_by_desc_phrase_id[tonumber(p2)] or name)
	local task_desc = get_rt_manager().task_info[task_name]
	local parent = get_rt_manager():get_parent(npc)

	local text = game.translate_string(task_desc.description)
	if not for_hint then
		text = text.." "..game.translate_string("rt_"..parent.."_ask_start")
	end

	if task_desc.type == "find_pda" then
		local smart_name = smart_names.get_smart_terrain_name(alife():object(task_desc.selected_target_smart))
		text = string.gsub(text, "!smart_name", smart_name)
	end

	return text
end

--Возвращает ид таска по НПСу (только для квестов типа squad_courier)
function squad_courier_task_id_by_npc(npc)
	for k,v in pairs(get_rt_manager().task_id_by_type["squad_courier"]) do
		local task_desc = get_rt_manager().task_info[v]
		if task_desc.selected_target == npc:id() then
			return v
		end
	end
end

-- Kirgudu
--Возвращает параметры таска по НПСу (только для квестов типа kill_stalker)
function CRandomTask:get_kill_stalker_task_desc_by_npc(npc_id)
	for k,v in pairs(self.task_id_by_type["kill_stalker"]) do
		local task_desc = self.task_info[v]
		if task_desc.selected_target == npc_id then
			return task_desc
		end
	end
	return nil
end
-- Kirgudu

--Прекондишен для диалога передачи предмета коммандиру сквада (для квестов типа squad_courier)
function squad_courier_has_item(npc, actor)
	local task_id = squad_courier_task_id_by_npc(npc)
	local task_desc = get_rt_manager().task_info[task_id]

	--Если квест связанный с этим НПС уже не активен, то восстанавливаем ему дефолтный стартовый диалог (если этого не было сделано ранее)
	if task_desc.status == "normal" then
		npc:restore_default_start_dialog()
		return false
	end

	return db.actor:object(task_desc.target) ~= nil and task_desc.status == "selected"
end

--Экшен диалога передачи предмета коммандиру сквада (для квестов типа squad_courier)
function squad_courier_dlg_action(npc, actor)
	local task_id = squad_courier_task_id_by_npc(npc)
	local task_desc = get_rt_manager().task_info[task_id]

	local task = db.actor:get_task(task_id, true)
	dialogs.relocate_item_section(npc, task_desc.target, "out")
	npc:restore_default_start_dialog()
	task_desc.status = "completed"
	task_desc.selected_target = nil
	task_desc.selected_squad_id = nil
	task:change_map_location("secondary_task_location_complex_take_reward", task_desc.parent_id)
	task:set_title(game.translate_string("rt_back_for_reward"))
	get_rt_manager():send_news(task_desc.name, "update")
end

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

function get_rt_manager()
	if rt_manager == nil then
		rt_manager = CRandomTask()
	end
	return rt_manager
end

function task_complete(task_id)
	return get_rt_manager():task_complete(task_id)
end

function task_fail(task_id)
	return get_rt_manager():task_fail(task_id)
end

function is_dead(npc)
	return not npc or npc==nil or (npc.alive and not npc:alive())
end

----------------------------- Менеджер случайных заказов ------------------------------
----------------------- Copyright 2010-2015 Minister, Kirgudu -------------------------