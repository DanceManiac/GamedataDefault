----------------------- Copyright 2010-2011 Rulix, P.A.X, DEXXX -----------------------
------------------------------- Обработка постпроцессов -------------------------------


local base_id = 2050
local effects = {
	fire_hit = {pp = {"fire_hit.ppe"},play_time = 2600},
	crit_hit_1 = {cam = {"fusker.anm","crit_hit_1.anm"},snd = {sound_object("actor\\pain_3")},play_time = 4000},
	crit_hit_2 = {cam = {"crit_hit_5.anm","crit_hit_2.anm"},snd = {sound_object("actor\\pain_3")},play_time = 4000},
	crit_hit_3 = {cam = {"crit_hit_3.anm","crit_hit_4.anm","crit_hit_4a.anm","crit_hit_4b.anm"},snd = {sound_object("actor\\pain_3")},play_time = 4000}
}

local last_updt = -100
function update()
	if not db.actor:alive() then
		for n,e in pairs(effects) do
			remove_effect(n,true)
		end
		return
	end
	local tg = time_global()
	wounded_pp_update(tg)
	local deltag = tg-last_updt
	if deltag >= 63 then
		update_effects(deltag)
		last_updt = tg
	end
end

function init_effects()
	for n,e in pairs(effects) do
		if e.pp or e.cam then
			base_id = base_id+1
			e.id = base_id
		end
		if e.pp then
			if not tonumber(e.pp[#e.pp]) then --type(e.pp[#e.pp]) ~= "number"
				table.insert(e.pp,1)
			end
		end
		if e.snd then
			e.snd[2] = 0
			e.snd[3] = 1
		end
		e.time = 0
		if not e.tr_time then
			if e.cyclic then
				e.tr_time = 5000
			else
				e.tr_time = 1
			end
		end
		if not e.cyclic and not e.play_time then
			e.play_time = e.snd and e.snd[1]:length() or 5000
		end
		if e.update_func then
			e.update_func = loadstring(e.update_func.."(...)")
			setfenv(e.update_func,this)
		end
		if e.callback_func then
			e.callback_func = loadstring(e.callback_func.."(...)")
			setfenv(e.callback_func,this)
		end		
	end
end

local inited
function update_effects(delta)
	if not inited then
		init_effects()
		inited = true
		return
	end
	for n,e in pairs(effects) do
		if e.play or e.ending then
			-- завершение по таймеру
			if not e.cyclic and e.play and e.play_time then
				e.time = e.time+delta
				if e.time > e.play_time then
					if e.callback_func then
						e.callback_func(e)
					end
					remove_effect(n)
				end
			end
			-- изменение фактора
			if e.factor ~= e.target_factor then
				local add = delta/e.tr_time
				if math.max(e.factor,e.target_factor)-math.min(e.factor,e.target_factor) < add then
					e.factor = e.target_factor
				else
					local fr = e.factor < e.target_factor and 1 or -1
					e.factor = e.factor+add*fr
				end
				if e.ending and e.factor < 0.05 then
					remove_effect(n,true)
				else
					if e.pp then
						level.set_pp_effector_factor(e.id,e.factor*e.pp[#e.pp],20)
					end
					if e.snd then
						e.snd[1].volume = e.factor*e.snd[3]
					end
				end
			end
			-- кастом апдейт
			if e.play and e.update_func then
				e.update_func(n,e,delta)
			end
		end
	end
end

function add_effect(name,ef)
	local eff = effects[name]
	if not eff.play then
		local loop = eff.cyclic
		if eff.ending and loop then
			eff.ending = nil
			eff.play = true
			eff.target_factor = 1
			return
		end
		eff.target_factor = 1
		eff.factor = 1
		eff.play = true
		if loop then
			eff.factor = 0.01
		end
		if eff.pp and (not ef or ef == "pp") then
			local pe = eff.pp[math.random(1,#eff.pp-1)]
			level.add_pp_effector(pe,eff.id,loop)
			level.set_pp_effector_factor(eff.id,eff.factor*eff.pp[#eff.pp])
		end
		if eff.cam and (not ef or ef == "cam") then
			local ce = eff.cam[math.random(1,#eff.cam)]
			level.add_cam_effector("camera_effects\\"..ce,eff.id,loop)
		end
		local snd = eff.snd
		if snd and (not ef or ef == "snd") then
			snd[1]:play(db.actor,snd[2],loop and sound_object.s2d+sound_object.looped or sound_object.s2d)
			snd[1].volume = snd[3]
		end
	end
end

function remove_effect(name,f)
	local eff = effects[name]
	if f then -- убираем нафиг
		if eff.pp then
			level.remove_pp_effector(eff.id)
		end
		if eff.cam then
			level.remove_cam_effector(eff.id)
		end
		if eff.snd then
			eff.snd[1]:stop()
		end
		eff.ending = nil		
	elseif eff.play then -- or (eff.factor and not eff.cyclic)
		eff.ending = true
		eff.target_factor = 0.01
	end
	eff.time = 0
	eff.play = nil
end

function set_ppe_factor(name,factor,f)
	if effects[name].play then
		if factor < 0.01 then
			factor = 0.01
		elseif factor > 1 then
			factor = 1
		end
		if f then
			level.set_pp_effector_factor(effects[name].id,factor,20)
			effects[name].factor = factor
		else
			effects[name].target_factor = factor
		end
	end
end

-- эффект ранения
local blood = 0
local bl_sound = sound_object([[heart\2]])
local burer_treshold = 0.05

local lite_treshold = 0.20 -- насколько должно уменьшиться здоровье с предыдущего обновления чтоб экран окрасился в красный
local crit_treshold_1 = 0.35 -- насколько должно уменьшиться здоровье с предыдущего обновления чтоб ГГ начало шатать
local crit_treshold_2 = 0.50 -- насколько должно уменьшиться здоровье с предыдущего обновления чтоб ГГ начало шатать
local crit_treshold_3 = 0.65 -- насколько должно уменьшиться здоровье с предыдущего обновления чтоб ГГ начало шатать
local drop_item_on_crit_prob = 0.20 -- вероятность того что ГГ выронит оружие
local prev_health = -1
local chk_h_t = 0

function wounded_pp_update(tg)
	if chk_h_t < tg then
		chk_h_t = tg+100
		local hl = prev_health-db.actor.health
		if hl > burer_treshold then burer_drop_weapon() end
		if hl > lite_treshold and db.actor:who_hit_name() then
			local effector_power = hl*3
			add_effect("fire_hit")
			set_ppe_factor("fire_hit",effector_power)
			if hl > crit_treshold_3 then
				add_effect("crit_hit_3")
				if math.random() < drop_item_on_crit_prob then
					local active_item = db.actor:active_item()
					if active_item and active_item:section() ~= "bolt" and active_item:section() ~= "wpn_binoc" and active_item:clsid() ~= clsid.wpn_knife_s then
						db.actor:drop_item(active_item)
					end
				end
			elseif hl > crit_treshold_2 then
				add_effect("crit_hit_2")
			elseif hl > crit_treshold_1 then
				add_effect("crit_hit_1")
			end
		end
		prev_health = db.actor.health
	end
	if db.actor.health<0.2 and blood==0 then
		level.add_pp_effector("bloody.ppe", 1999, true)
		level.set_pp_effector_factor(1999, 5.0)
		if not bl_sound:playing() then 
			bl_sound:play_at_pos(db.actor, db.actor:position(), 1, sound_object.looped)
		end
		blood = 1
	elseif db.actor.health>0.2 then
		level.remove_pp_effector(1999)
		if bl_sound:playing() then 
			bl_sound:stop() 
		end
		blood = 0
	elseif db.actor.health<0.2 and blood==1 and bl_sound:playing() then
		bl_sound:set_position(db.actor:position())
	end
end


-- Выпадение оружия от удара бюрера на расстоянии
function burer_drop_weapon()

	if db.actor:who_hit_name() and alife():object(db.actor:who_hit_name()) then

		local obj = level.object_by_id(alife():object(db.actor:who_hit_name()).id)
		
		if obj and string.find(obj:name(),"burer") and obj:alive() and obj:best_enemy() and obj:best_enemy():id()==db.actor:id() and obj:position():distance_to(db.actor:position()) > 5.0 and obj:position():distance_to(db.actor:position()) < 20.0 then --and obj:see(db.actor) then
		
			local active_item = db.actor:active_item()
		
			if active_item and active_item:section() ~= "bolt" and active_item:section() ~= "wpn_binoc" and active_item:clsid() ~= clsid.wpn_knife_s and math.random()>0.7 then
		
				db.actor:drop_item(active_item)
			end
		
		end
	end

end


------------------------------- Обработка постпроцессов -------------------------------
----------------------- Copyright 2010-2011 Rulix, P.A.X, DEXXX -----------------------