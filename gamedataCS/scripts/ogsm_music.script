------------------------- Copyright 2007-2011 xStream, DEXXX --------------------------
----------------------------- Интерактивная боевая музыка -----------------------------


local ambient_vol = get_console():get_float('snd_volume_music')

local last_update=0
local inert = 1000
local clicks_prev = 200

music_section=""
music_previous_section=""
music_next_section_start_time=0
music_stop_previous=0
music=false
music_init = 0
music_themes = {}
music_phases={}

local music_obj=nil
local music_stor={
	enemy_see_actor=0,
	actor_see_enemy=0,
	enemy_hit_actor=0,
	actor_hit_enemy=0
}

music_lo_lvl=7
music_hi_lvl=17

local music_graph={}

function build_music_graph()
	local skip = false
	local lname = level.name()
	local sini = ini_file("scripts\\music\\music.ltx")
	if sini and sini:section_exist("music_themes") then
		local result, id, value = nil, nil, nil
		for a=0,sini:line_count("music_themes")-1 do
			result, id, value = sini:r_line("music_themes",a,"","")
			if id~=nil and ogsm.trim(id)~="" and ogsm.trim(id)~=nil then
				id=ogsm.trim(id)
				value1 = ogsm.str_explode("|", ogsm.trim(value), ogsm.trim(value), true)
				value={}
				for k,v in pairs(value1) do
					local tmp = ogsm.str_explode("=", v, v, true)
					value[tmp[1]]=tmp[2]
				end
				
				if value.map then
					local t = ogsm.str_explode(",", value.map, value.map, true)
					for kk,vv in pairs(t)do
						skip = skip or vv==lname
					end
					skip = not skip
				else
					skip = false
				end
				
				if not skip then
					table.insert(music_themes, id)
					local t = ogsm.parse_ini_section_to_array(sini,id.."_music_files")
					t.null = ""
					for k,v in pairs(t) do
						music_phases[id.."_"..k]=v
						if not music_graph[id.."_"..k] then music_graph[id.."_"..k] = {} end
						local tt = ogsm.parse_ini_section_to_array(sini,id.."_graph_"..k)
						for kk,vv in pairs(tt) do
							local tmp = ogsm.str_explode(",",vv,vv,true)
							local lvl = tmp[1]
							lvl = ogsm_music["music_"..lvl.."_lvl"]
							music_graph[id.."_"..k][id.."_"..kk] = {lvl,tmp[2]}
						end
					end
				end
			end
		end
		if table.getn(music_themes)>0 then return true else return false end
	end
	return false
end

function music_start(sound)
	if not music then
		if music_obj==nil then
			music_obj=xrs_stereo.stereo_sound()
		end
		music_obj:initialize(music_phases[sound],ambient_vol)
		music_next_section_start_time=music_obj:play()-clicks_prev
		music_previous_section=music_section	
	end
	music = true
end

function music_change(sound)
	if music then
		music_obj:initialize(music_phases[sound],ambient_vol)
		music_next_section_start_time=music_obj:play_at_time(music_next_section_start_time+clicks_prev, "", ambient_vol)-clicks_prev
		music_previous_section=music_section
	end
end

function interactive_music()

	if IsDynamicMusic() then

		local cur_amb_vol = get_console():get_float('snd_volume_music')
		if music then		
			fade_out(cur_amb_vol, 100, 0.1)
		else	
			if db.storage.silence_zone_table and db.actor:alive() then
				local actor_pos = db.actor:position()	
				local flag = 0
				for k,v in pairs(db.storage.silence_zone_table) do
					local zone = db.zone_by_name[v]
					if zone:inside(actor_pos) then					
						flag = 1
						break
					end				
				end
				if flag == 1 then
					fade_out(cur_amb_vol, 1000, 0.1)
				else
					fade_in(cur_amb_vol, 1000, 0.05)
				end
			else			
				fade_in(cur_amb_vol, 100, 0.05)
			end	
		end


		if music_init==-1 then return end
	
		if music_init==0 then
			if build_music_graph() then
				ambient_vol = get_console():get_float('snd_volume_music')
				music_init=1
			else
				music_init=-1
				return
			end
		end
	
		if not music then
			if time_global() - last_update > inert then
				music_select_section(inert)
				last_update = time_global()
			end
		end
	
		if not music and music_previous_section=="" and music_section~="" then
			music_start(music_section)
		end
		if music and music_previous_section~="" and music_section=="" then
			music_previous_section=""
		end
	
		if music then
			music_obj:update(ambient_vol)
			if time_global() > music_next_section_start_time then
				music_select_section(music_obj:length())
				if music_section~="" then
					music_change(music_section)
				else
					music=false
				end
			end
		end

	else
		if music_obj and music_obj:playing() then			
			music_obj:stop()
			music_section=""
			music_previous_section=""
			music_obj=nil
		end

	end
end

function reset_music_cntrs(c)
	--числа здесь указывают скорость падения шкал. считается примерно так - за сколько секунд можно обнулять шкалу
	--если она не пополняется
	--пример: 7/3сек = 2 c копейами - пишем 2
	--      или 17/4сек = 4+ - пишем 4
	music_stor.actor_see_enemy=music_stor.actor_see_enemy-2*c
	music_stor.enemy_see_actor=music_stor.enemy_see_actor-2*c
	music_stor.actor_hit_enemy=music_stor.actor_hit_enemy-8*c -- актор хит считается в два раза чаще, снимаем тоже в 2 раза больше
	music_stor.enemy_hit_actor=music_stor.enemy_hit_actor-4*c
	
	if music_stor.actor_see_enemy<0 then 
		music_stor.actor_see_enemy=0 
	elseif music_stor.actor_see_enemy>music_lo_lvl then 
		music_stor.actor_see_enemy=music_lo_lvl
	end
	if music_stor.enemy_see_actor<0 then 
		music_stor.enemy_see_actor=0 
	elseif music_stor.enemy_see_actor>music_lo_lvl then 
		music_stor.enemy_see_actor=music_lo_lvl 
	end
	if music_stor.actor_hit_enemy<0 then 
		music_stor.actor_hit_enemy=0 
	elseif music_stor.actor_hit_enemy>music_hi_lvl then 
		music_stor.actor_hit_enemy=music_hi_lvl
	end
	if music_stor.enemy_hit_actor<0 then 
		music_stor.enemy_hit_actor=0 
	elseif music_stor.enemy_hit_actor>music_hi_lvl then 
		music_stor.enemy_hit_actor=music_hi_lvl
	end
	
end

local shoot_helper=0

function calc_adrenaline(act,obj,typ)
	local dist = obj:position():distance_to(db.actor:position())
	if act=="actor_see_enemy" then
		music_stor.actor_see_enemy=music_stor.actor_see_enemy+50/dist
					--на расстоянии в 50 метров = 1 в секунду
	elseif act=="enemy_see_actor" then
		music_stor.enemy_see_actor=music_stor.enemy_see_actor+50/dist
					--на расстоянии в 50 метров = 1 в секунду
	elseif act=="actor_hit_enemy" then
		if time_global()>shoot_helper then
			music_stor.actor_hit_enemy=music_stor.actor_hit_enemy+13
					--на хит актором врага накидываем 13 в шкалу - накаляем обстановку до предела... 
					-- (7 видимость + 13 за хит - 4 за снижение = 16, еще раз ГГ пукнет и понеслась...)
					-- а поскольку остальные параметры дискретизированы по секундам, то 
					-- имитируем то же самое и для попаданий актора в жертву
			shoot_helper=time_global()+500 -- очереди короткие, потому берем по полсекунды, получается адекватно
		end
	elseif act=="enemy_hit_actor" then
		music_stor.enemy_hit_actor=music_stor.enemy_hit_actor+8
					--на СТРЕЛЬБУ в актора врагом накидываем 8 в шкалу
	end
end

function music_select_section(time)
	reset_music_cntrs(time/inert)
	local cs = music_section
	
	local eseen = music_stor.enemy_see_actor
	if eseen >= music_lo_lvl then 
		eseen = music_lo_lvl
	end
	
	local aseen = music_stor.actor_see_enemy
	if aseen >= music_lo_lvl then 
		aseen = music_lo_lvl
	end
	
	local ehits = music_stor.enemy_hit_actor
	if ehits >= music_hi_lvl then 
		ehits = music_hi_lvl 
	end
	
	local ahits = music_stor.actor_hit_enemy
	if ahits >= music_hi_lvl then 
		ahits = music_hi_lvl 
	end
	
	local lvl = aseen + eseen
	if lvl>music_hi_lvl*0.75 then lvl=music_hi_lvl*0.75 end
	
	lvl = ehits + lvl + ahits
	if music_section=="" then 
		music_section=music_themes[math.random(table.getn(music_themes))].."_null" 
	end
	
	local last_sel_max=0
	local last_sel_min=1000
	for k,v in pairs(music_graph[music_section]) do
		if v[2]=="<" and v[1]<last_sel_min then
			if v[1]>lvl then 
				music_section=k 
				last_sel_min=v[1]
			end
		end


		if v[2]==">" and v[1]>=last_sel_max then
			if v[1]<=lvl then 
				music_section=k
				last_sel_max=v[1] 
			end
		end
	end
	
	if string.find(music_section,"null") then music_section="" end
	if music and music_previous_section~="" and music_section=="" then
		music_previous_section=""
	end
	
	local l=0
	if music and music_obj~=nil then l=music_obj:length() end
end



function fade_in(cur_amb_vol, timer, counter)
	if fade_in_check_time ~= nil and time_global() - fade_in_check_time <= timer then return end
	fade_in_check_time = time_global()	
	if cur_amb_vol<ambient_vol then	
		cur_amb_vol=cur_amb_vol+counter
		if cur_amb_vol>ambient_vol then cur_amb_vol=ambient_vol end
		get_console():execute('snd_volume_music '..cur_amb_vol)
	end
end

function fade_out(cur_amb_vol, timer, counter)	
	if fade_out_check_time ~= nil and time_global() - fade_out_check_time <= timer then return end
	fade_out_check_time = time_global()	
	if cur_amb_vol>0 then		
		cur_amb_vol=cur_amb_vol-counter
		if cur_amb_vol<0 then cur_amb_vol=0 end
		get_console():execute('snd_volume_music '..cur_amb_vol)
	end	
end


----------------------------- Интерактивная боевая музыка -----------------------------
------------------------- Copyright 2007-2011 xStream, DEXXX --------------------------