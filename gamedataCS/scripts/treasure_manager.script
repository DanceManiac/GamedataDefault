taker = false

local sm_treasures_tbl = {} --#SM+#--
local rank_table = {}
rank_table["novice"] = 0
rank_table["stalker"] = 300
rank_table["veteran"] = 600
rank_table["master"] = 900
local treasure_by_target = {}

class "CTreasure"

function CTreasure:__init(ini, section)
	self.section		= section
	self.target			= utils.cfg_get_string(ini, section, "target", nil, true, "")
	self.name			= utils.cfg_get_string(ini, section, "name", nil, true, "")
	self.description	= utils.cfg_get_string(ini, section, "description", nil, true, "")
	self.items_descr = "" --#SM+#--
	local items 		= utils.cfg_get_string(ini, section, "items", nil, true, "", "nil")
	if items~="nil" then
		self.items 		= utils.parse_spawns(items)
	    if self.items == nil then
	        abort("cant find 'items' in %s", id)
	    end
	end
	self.rank			= utils.cfg_get_string(ini, section, "rank", nil, false, "", "novice")
	self.treasure_cost	= utils.cfg_get_number(ini, section, "treasure_cost", nil, false, 0)	-- 24.04.08
	self.say_item_name	= math.random(0,1)  --#SM+#--
	if self.say_item_name == 1 then	--#SM+#--
		self.say_item_name = true
	else
		self.say_item_name = false
	end
	local community		= parse_names(utils.cfg_get_string(ini, section, "community", nil, false, "", "stalker, bandit, dolg, freedom, csky, stalker_enemy, bandit_enemy"))
	self.on_empty		= xr_logic.parse_condlist(db.actor, section, "on_empty", utils.cfg_get_string(ini, section, "on_empty", nil, false, "", "false"))
	self.community = {}
	for k,v in pairs(community) do
		self.community[v] = true
	end
	if treasure_by_target[self.target] == nil then
		treasure_by_target[self.target] = {}
	end
	table.insert(treasure_by_target[self.target], self)
	self.condlist		= xr_logic.parse_condlist(db.actor, section, "condlist", utils.cfg_get_string(ini, section, "condlist", nil, false, "", "false"))
end

function CTreasure:give_treasure(mode)
	local obj = alife():object(self.target)
	if obj ~= nil then
        ngsm_treasure_manager.set_marker(obj.id, self.description, self.name, mode) --'Ставим метку
        if mode == "mod" or mode ==  "mod2" then --'Сгенерить вещи
		    if mode ==  "mod2" then
			    if self.items then
	                for kk,vv in pairs(self.items) do
	                    if ammo_section[vv.section] == true then
	                        local t=se_respawn.create_ammo(vv.section, obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id, vv.prob)
	                    else
	                        for i=1,vv.prob do
	                            local t=alife():create(vv.section, obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id)
	                        end
	                    end
					    self.items_descr = self.items_descr..(vv.section).."," --#SM+#--
	                end
		        end
			else
                ngsm_treasure_manager.build_treasure(obj, self)  --#SM+#--
			end
			if mode == "buy" then
		    -- New Cost --   	--#SM+#--
		    local items_tbl = ngsm.str_expl(self.items_descr, ",")
		    local ini = system_ini()
 	        for i = 1,#items_tbl do		--#SM+#--
		        if items_tbl[i]~="" and items_tbl[i]~=nil then
	                self.treasure_cost = self.treasure_cost  + ini:r_u32(items_tbl[i], "cost")
		        end	
     		end
			self.treasure_cost = self.treasure_cost + math.random(1500,7500)
		    self.treasure_cost = math.floor(self.treasure_cost/3)	--#SM+#--
			if self.treasure_cost > 12000 then
			    self.treasure_cost = 12000 --MW
            end
			end
		else
		    self.active = true
	    end
    end
end

function CTreasure:check_rank_and_community(npc)
	return (npc:character_rank()>rank_table[self.rank]) and (self.community[npc:character_community()]==true)
end

function CTreasure:check_for_used_target()
	for k,v in pairs(treasure_by_target[self.target]) do
		if v.active == true then
			return false
		end
	end
	return true
end

function CTreasure:reset_treasure()
	printf("treasure_manager: reset_treasure [%s]", self.section)
	self.active = false
    if(self.treasure_cost>=0) then
		self.treasure_cost = -1
	end
end

function use_box(box, actor)
	if box:is_inv_box_empty() == true then
	    if level.map_has_object_spot(box:id(), "crlc_small") ~= 0 then
		    level.map_remove_object_spot(box:id(), "crlc_small")
	    end
		if level.map_has_object_spot(box:id(), "treasure") ~= 0 then
		    level.map_remove_object_spot(box:id(), "treasure")
	    end
	    if taker == true and box:section()=="active_ruck" then
	    -- если рюкзак который установил ГГ пуст(он же его и опустошает) то
		        level.start_stop_menu(level.main_input_receiver(), true)
		        alife():create("inv_ruck",box:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
		        alife():release(alife():object(box:id()))	 
	    end
		-- if box:section()=="active_ruck" then
		    -- box:set_tip_text("inventory_box_take")
		-- end
	-- else
	    -- if box:section()=="active_ruck" then
	        -- box:set_tip_text("inventory_box_use")
		-- end
	end
end

function use(npc)
	printf("treasure_manager: npc[%s] is used by actor", npc:name())
	local available_treasures = {}
	local selected_treasure = nil
	for k,v in pairs(treasures) do
		if xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist) == "true" and
			v:check_rank_and_community(npc) == true and v.active ~= true and v:check_for_used_target() == true and (v.treasure_cost==0) then
			table.insert(available_treasures, v)
		end
	end
	if #available_treasures == 0 or math.random(100) > 15 then
		return
	end
	selected_treasure = available_treasures[math.random(1, #available_treasures)]
	selected_treasure:give_treasure("trup")
end

function treasure_empty(box, box_story_id)
	printf("!!! treasure empty")
	local treasures = treasure_by_target[box_story_id] or treasure_by_target[box:name()]
	if treasures == nil then
		return
	end
	for k,v in pairs(treasures) do
		if v.active then
	        xr_logic.pick_section_from_condlist(db.actor, box, v.on_empty)
	        v:reset_treasure()
		end
	end
	if level.map_has_object_spot(box:id(), "spec_treasure") ~= 0 then
		level.map_remove_object_spot(box:id(), "spec_treasure")
	end
	if level.map_has_object_spot(box:id(), "treasure") ~= 0 then
		level.map_remove_object_spot(box:id(), "treasure")
	end
    xr_statistic.inc_founded_secrets_counter()
end

function take_item_from_box(box, box_story_id, item)
	printf("!!! take item from box")
	if box:is_inv_box_empty() == true then
	    treasure_empty(box, box_story_id)
	    if box:section()=="active_ruck" then	-- если рюкзак который установил ГГ пуст(он же его и опустошает) то
		    level.start_stop_menu(level.main_input_receiver(), true)
		    alife():create("inv_ruck",box:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
		    alife():release(alife():object(box:id()))
	    end	 
	end
end

function load_treasures()
	local treasure_ini = ini_file("misc\\treasure_manager.ltx")
	--' Итерируемся по списку тем.
    if not treasure_ini:section_exist("list") then
		abort("There is no section [list] in treasure_manager.ltx")
	end
	local n = treasure_ini:line_count("list")
	local id, value = "",""
	local category = ""
	--' начальная установка
	treasures = {}
	for i=0,n-1 do
		result, section, value  = treasure_ini:r_line("list",i,"","")
		treasures[section] = CTreasure(treasure_ini, section)
    end
end

function save(thread)
	set_save_marker(thread, "save", false, "treasure_manager")
	for k,v in pairs(treasures) do
        thread:w_bool(v.say_item_name)
		thread:w_bool(v.active==true)
        thread:w_bool(v.treasure_cost == -1)
		thread:w_u32(v.treasure_cost)				--#SM+#--
		sm_treasures_tbl[v.section] = v.items_descr	--#SM+#--
	end
	set_save_marker(thread, "save", true, "treasure_manager")
	ngsm.save_table("sm_treasures_tbl", sm_treasures_tbl) --#SM+#--
end

function load(thread)
    sm_treasures_tbl = ngsm.load_table("sm_treasures_tbl")  --#SM+#--
	set_save_marker(thread, "load", false, "treasure_manager")
	for k,v in pairs(treasures) do
        v.say_item_name = thread:r_bool()
		v.active = thread:r_bool()
		local cost = thread:r_bool()
		if cost == true then
			v.treasure_cost = -1
		end
        v.treasure_cost = thread:r_u32()		    --#SM+#--
		v.items_descr   = sm_treasures_tbl[v.section]         --#SM+#--
	end
	set_save_marker(thread, "load", true, "treasure_manager")
end
--Выдача тайника из xr_effect.script
function give_treasure(treasure_id, mode)
	if treasures[treasure_id] ~= nil then
		if treasures[treasure_id].active ~= true then
			treasures[treasure_id]:give_treasure(mode)
		end
	end
end

local dt = nil

function select_dialog_treasures(npc)
	local available_treasures = {}
	for k,v in pairs(treasures) do
		if xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)=="true" and
			(v:check_rank_and_community(npc)) and not(v.active) and (v:check_for_used_target()) and (v.treasure_cost>0) then
			table.insert(available_treasures, v)
		end
	end
	if(#available_treasures==0) then
		return nil
	end
	dt = available_treasures[math.random(1, #available_treasures)]
	return dt
end

function is_dialog_treasure(npc,ss)
	return select_dialog_treasures(npc)~=nil
end

function is_not_dialog_treasure(npc,ss)
	return select_dialog_treasures(npc)==nil
end

function give_treasure_from_dialog(npc,ss)
	dialogs.relocate_money(npc, dt.treasure_cost, "out")
	dt:give_treasure("buy")
end

function get_treasure_cost()
	return tostring(dt.treasure_cost)
end

function have_money()
	return dt.treasure_cost<=db.actor:money()
end

function have_no_money()
	return dt.treasure_cost>db.actor:money()
end

function get_treasure_desc()
	return game.translate_string(dt.description)
end

function is_item_name()
	return dt.say_item_name
end

function is_not_item_name()
	return not(dt.say_item_name)
end

function get_item_name() --#SM+#--
	local ini = system_ini()
	local items = dt.items_descr 
	local items_tbl = ngsm.str_expl(items, ",")
	if items_tbl then
        local str = game.translate_string(ini:r_string(items_tbl[1], "inv_name"))
        for i = 2,#items_tbl do
	        if items_tbl[i]~="" and items_tbl[i]~=nil then
                str = str..", "..game.translate_string(ini:r_string(items_tbl[i], "inv_name"))
	        end
        end
        str = str.."."
        return str
	else
		printf("ERROR! items are not set in treasure [%s]", dt.section)
        return game.translate_string("treasure_dialog_11131")
	end
end