---------------------------- Библиотека служебных скриптов ----------------------------


SMARTS = {} -- таблица смартов по имени [name] = sobj

--//Вызов функции из скрипта
function call(scrpt, funct, ...)
    if _G[scrpt] and _G[scrpt][funct] then
	    return _G[scrpt][funct](...)
    end
end

-- Целимся ли через прицел 
function isScopeMode()
    return device().fov < 33 
end

-- Это sim_сталкер (не сюжетный)
-- Принимает obj\sobj\id 
-- Пока проверка лишь по тому, что название профиля содержит sim_default !!!
function IsSim(obj)
    if obj==nil then
	    return
	end
    if type(obj) == "number" then
        obj = alife():object(obj)
    end
    if string.find(obj:name(), "sim_default") then
        return true
    end
    return false
end

function IsTrader(npc)
	if npc:community() == "trader" then return true end
	local char_ini = xr_logic.get_customdata_or_ini_file(npc, "<customdata>")
	if char_ini and char_ini:section_exist("logic") and char_ini:line_exist("logic", "trade") then
		return true
	end
	return false
end

-- Возвращает true если идёт выброс, иначе false
function IsSurge()
    if xr_surge_hide then
        return xr_surge_hide.surge_activated
    end
    return false
end

--//Узнаём отношение группировки к другой группировке
function get_faction_relation(f1, f2)
    if game_relations.is_factions_friends(f1, f2) then return "friend" end
    if game_relations.is_factions_enemies(f1, f2) then return "enemy" end
    return "neutral"
end

--// Записываем переменную
function save_var(variable_name, value, tbl)
    ngsm_virtual_save.save_to_table(variable_name, value, tbl)
end

--// Загружаем переменную
function load_var(variable_name, value_if_not_found)
    return ngsm_virtual_save.load_from_table(variable_name, value_if_not_found)
end

--// Удаляем переменную
function del_var(variable_name)
    ngsm_virtual_save.del_var(variable_name)
end

--// Записываем переменную
function save_var(variable_name, value, tbl)
    ngsm_virtual_save.save_to_table(variable_name, value, tbl)
end

--// Загружаем переменную
function load_var(variable_name, value_if_not_found)
    return ngsm_virtual_save.load_from_table(variable_name, value_if_not_found)
end

--// Удаляем переменную
function del_var(variable_name)
    ngsm_virtual_save.del_var(variable_name)
end

--// Записываем переменную в объект   
function save_obj(id, variable_name, value)
    if id == nil then
	    abort("error in fnct save_obj, id=nil")
	end
    if ngsm_virtual_save.obj_params_table[id] == nil then
        ngsm_virtual_save.obj_params_table[id]={}
    end
    ngsm_virtual_save.obj_params_table[id][variable_name] = value
    save_var(id.."=>"..variable_name, value)
end

--// Загружаем переменную из объекта
function load_obj(id, variable_name, defval)
    if ngsm_virtual_save.obj_params_table[id]~=nil then
        if ngsm_virtual_save.obj_params_table[id][variable_name]~=nil then 
            return ngsm_virtual_save.obj_params_table[id][variable_name]
        end
     end
    if defval ~= nil then
		return defval
    end
	return nil
end

--// Удаляем параметр у объекта
function del_obj(id, variable_name)
    if ngsm_virtual_save.obj_params_table[id] then
        ngsm_virtual_save.obj_params_table[id][variable_name] = nil
    end
    del_var(id.."=>"..variable_name)
end

--// Сохранение таблицы
function save_table(name,tbl)
    if tbl == nil or empty(tbl) then
	    del_var("name")
	    del_var("itstable_"..name)
    end
    save_var(name,pack_array_to_string(tbl), true)
end

--// Загрузка таблицы
function load_table(name)
  local var = load_var(name)
  if var == nil then
      return {}
   end
  return unpack_array_from_string(var)
end

--// Проверка наличия слова в заданной строке
function find_in_string(where,what)
    if string.find(where,what) then 
        return true
    end
    return false
end

function pack_array_to_string(array)
  return string.char(1)..pack_new(array)
end

local pack_type_num=1
local pack_type_string=2
local pack_type_bool=3
local pack_type_table=4
local pack_val_endtable=5
--[[
 Новый формат упаковки: 
 table ::= subtable
 subtable ::= keytype key valuetype ( value | subtable 0x5 )
 keytype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )
 valuetype ::= ( 0x1 | 0x2 | 0x3 | 0x4 )
]]
function pack_new(tbl)
  local ret=""
  for k,v in pairs(tbl) do
    if type(k)=="number" then
      ret=ret..string.char(pack_type_num)..k
    elseif type(k)=="string" then
      ret=ret..string.char(pack_type_string)..k
    else
      abort("unsupported key type "..type(k))
    end
    if type(v)=="number" then
      ret=ret..string.char(pack_type_num)..v
    elseif type(v)=="string" then
      ret=ret..string.char(pack_type_string)..v
    elseif type(v)=="boolean" then
      ret=ret..string.char(pack_type_bool)..tostring(v)
    elseif type(v)=="table" then
      ret=ret..string.char(pack_type_table)..pack_new(v)..string.char(pack_val_endtable)
    end
  end
  return ret
end

function unpack_array_from_string(str)
    if str==nil or str=="" then
        return {}
	end
    if string.sub(str,1,1)~=string.char(1) then
        -- Старый формат упаковки
        return _parse(str)
    else
        -- новый формат упаковки тэгирован символом c кодом 1.
        return parse_new(string.sub(str,2,-1))
    end
end

function _parse(str)
    local ret={}
    while str and str~="" do
        local i1,i2,key=string.find(str,'(.-)=>')
        if i2~=nil then
            str=string.sub(str,i2+1)
            i1,i2,val=string.find(str,'"(.-)"|')
            if val and i1==1 then
                -- строка
                _assign(ret,key,val)
            else
                i1,i2,val=string.find(str,'(%b{})|')
                if val and i1==1 then
                    -- таблица
                    _assign(ret,key,_parse(string.sub(val,2,-2)))
                else
                    i1,i2,val=string.find(str,'(.-)|')
                    -- число или булево значение
                    if val=="true" then
                        _assign(ret,key,true)
                    elseif val=="false" then
                        _assign(ret,key,false)
                    else
                        _assign(ret,key,val+0)
                    end
                end
            end
            str=string.sub(str,i2+1)
        end
    end
    return ret
end

function _assign(tbl,key,val)
    local key0=string.match(key,'"(.*)"')
    if key0 then
        tbl[key0]=val
    else
        tbl[key+0]=val
    end
end

function parse_new(str,idx)
    local ret={}
    idx=idx or 1
	while true do
		local key,value
		if idx>string.len(str) then
		  return ret,idx
		end
		vtype,idx=get_byte(str,idx)
		if vtype==pack_type_num then
		  key,idx=get_num(str,idx)
		elseif vtype==pack_type_string then
		  key,idx=get_string(str,idx)
		elseif vtype==pack_val_endtable then
		  return ret,idx
		else
		  abort("unsupported key type 1 "..tostring(vtype).." string = ["..str.."] ("..idx..")")
		end
		vtype,idx=get_byte(str,idx)
		if vtype==pack_type_num then
		  value,idx=get_num(str,idx)
		elseif vtype==pack_type_string then
		  value,idx=get_string(str,idx)
		elseif vtype==pack_type_bool then
		  value,idx=get_bool(str,idx)
		elseif vtype==pack_type_table then
		  value,idx=parse_new(str,idx)
		else
		  abort("unsupported key type 2 "..tostring(vtype).." string = "..str.." ("..idx..")")
		end
		ret[key]=value
	end
end

function get_byte(str,idx)
    return string.byte(string.sub(str,idx,idx)),idx+1
end

function get_string(str,idx)
    local idx1=string.len(str)+1
    for i=idx,string.len(str),1 do
        if string.byte(string.sub(str,i,i))<32 then
            idx1=i
            break
        end
    end
    return string.sub(str,idx,idx1-1),idx1
end

function get_num(str,idx)
    local st,idx1=get_string(str,idx)
    return st+0,idx1
end

function get_bool(str,idx)
    local st,idx1=get_string(str,idx)
    if st=="1" or st=="true" then
	    return true,idx1
    end
    if st=="0" or st=="false" then
	    return false,idx1
    end
    return "error_bool",idx1
end

function str_expl(sStr, sDiv, Mode, bNoClear)
    if not (sStr and sStr ~= '') then
        return {}
	end -- нечего разделять
    local tRet = {}
    local sPattern = '[%w%_]+' -- дефолтный патерн (разделение по 'словам')
    if type(sDiv) == "string" then -- если задан сепаратор: разделяем по нему
        if bNoClear then -- если НЕ указано 'чистить пробелы'
            sPattern = '([^'..sDiv..']+)'
        else -- иначе с чисткой пробелов
            sPattern = '%s*([^'..sDiv..']+)%s*'
        end
    end
    -- разделяем строку по патерну
    if Mode == nil then -- обычный массив
        for sValue in sStr:gmatch(sPattern) do
            table.insert(tRet, sValue)
        end
    else
        local sTypeMode = type(Mode)
        if sTypeMode == "boolean" then -- таблица '[значение] = true или false'
            for sValue in sStr:gmatch(sPattern) do
                tRet[sValue] = Mode
            end
        elseif sTypeMode == "number" then -- таблица '[idx] = число или стринг'
            for sValue in sStr:gmatch(sPattern) do
                tRet[#tRet+1] = tonumber(sValue) or sValue
            end
        end
    end
    return tRet -- возвращаем таблицу
end

-- Получение таблицы значений из строки с разделителем
function get_table_list_from_string(mode, list)
	if not list or list == "nil" or list:trim() == "" or (mode ~= 'string' and mode ~= 'number') then
	    return {}
	end
	local t = list:split(",")
	if mode == 'number' then
		local t2 = {}
		for _,v in pairs(t) do
			table.insert(t2, tonumber(v))
		end
		return t2
	end
	return t
end

function read_if_exist_str(ltx, section, value, default)
	if ltx:line_exist(section,value) then
		return ltx:r_string(section,value)
	else
		return default
	end
end

-- Получить строку из LTX фаила (для совместимости)
local loaded_ltx = {}

function get_ltx_new(l_name,l_string,type,ini_file)
    if l_name == nil then
	    abort("l_name = nil, %s, %s", tostring(l_string), tostring(type))
    end
    if not loaded_ltx[l_name] then
	    loaded_ltx[l_name] = {}
    end
    if loaded_ltx[l_name][l_string] then
	    return loaded_ltx[l_name][l_string]
    end
    local ini = ini_file or system_ini()
    if ini:section_exist(l_name) and ini:line_exist(l_name, l_string) then
	    if type==nil or type=="num_float" then   -- число с запятой
	    loaded_ltx[l_name][l_string] = ini:r_float(l_name, l_string)
	    return loaded_ltx[l_name][l_string]
	end
	    if type=="bol" then
	    loaded_ltx[l_name][l_string] = ini:r_bool(l_name, l_string)
	    return loaded_ltx[l_name][l_string]
	end
	    if type=="num" then   -- целое число
	    loaded_ltx[l_name][l_string] = ini:r_u32(l_name, l_string)
	    return loaded_ltx[l_name][l_string] 	 
	    end
	    if type=="str" then
	        loaded_ltx[l_name][l_string] = ini:r_string(l_name, l_string)
	        return loaded_ltx[l_name][l_string] 	 
	    end
    end
    return nil
end

-- Вызов таймера
function __do_timer_action_new(s,p)
    call(script_name(), s, p)
end

--остановка таймера игрового времени
local gtn = 0

function stop_gtimer(name)
	if ogsm.is_g_timer_exists(name) == true then
		ogsm.del_variable("gt"..gtn)
	end
end

GLOBAL_TIME = -1	-- 	Достоверный global_time от начала игры (?), который не сбивается по достижению предела

local StartTime

function main_timer()
    AddGlobalTime()
	StartTime = GLOBAL_TIME
end	
			
function AddGlobalTime()
	local strTime = system_ini():r_string("alife", "start_time")
	local d = str_expl(system_ini():r_string("alife", "start_date"), ".")
	GLOBAL_TIME = game.CTime()
	GLOBAL_TIME:set(tonumber(d[3]), tonumber(d[2]), 1, 0, 0, 0, 0)
	local temp = game.CTime()
	temp:setHMS(24,0,0)
	GLOBAL_TIME = GLOBAL_TIME - temp	
end
--//
function g_start_timer_new(name,delay_d,delay_h,delay_m,action, rewrite)
    local t = game.get_game_time()
    local time = math.floor(t:diffSec(StartTime) / 60)	--time in game minutes
    if delay_d==nil or delay_h==nil or delay_m==nil then
        return false
    end
    if action==nil then
        action = ""
    end
    local a=1
    while new_virtual_save.params_table["gts"..a] do
        if rewrite==true then
            if load_var("gts"..a)==name then
                break
            end
        end
        a=a+1
        if a>200 then 
	        abort("New Timer System: Limit is full (>200)")
            return false 
        end
    end
    save_var("gts"..a, name)
    save_var("gd"..a, time+delay_d*60*24+delay_h*60+delay_m)
    if type(action) == "table" then
        save_var("gp"..a, pack_array_to_string(action), true)
        save_var("g_tbl"..a, true)
    else 
        save_var("gp"..a, action)
    end
    return true
end

--старт таймера в реальном времени (секунды)
function start_timer_new(name,delay,action, rewrite)
    if not delay then
        return false
    end
    if not action then
        action = ""
    end
    local time = game.time() --time in seconds since 1970
    local a=1
    while new_virtual_save.params_table["xt"..a] do
        if rewrite==true then
            if load_var("xt"..a)==name then
                break
            end
        end
        a=a+1
        if a>160 then 
	        abort("New Timer System: Limit is full (>160)")
            return false 
        end
    end
    save_var("xt"..a, name)
    save_var("xd"..a, time+delay*10000)  
    if type(action) == "table" then
        save_table("xp"..a, action)
        save_var("x_tbl"..a, true)
    else 
        save_var("xp"..a, action)
    end
    return true
end

function check_timers_new()
    local tmp
    for a=1,160,1 do
        tmp=load_var("xt"..a,nil)
        if tmp~=nil then
            __timer_found_new(a)  
        end
    end
    for a=1,200,1 do
        tmp = load_var("gts"..a,nil)
        if tmp~=nil then
            __g_timer_found_new(a)  
        end
    end
end

function __g_timer_found_new(idx)
    local t = game.get_game_time()
    local gtime = math.floor(t:diffSec(StartTime) / 60)	--time in game minutes
    local name,params
    if load_var("gd"..idx, nil)<gtime then
        name = load_var("gts"..idx, nil)
        if load_var("g_tbl"..idx, false) then
            params = unpack_array_from_string(load_var("gp"..idx, nil))
            del_var("g_tbl"..idx)
        else
            params = load_var("gp"..idx, nil)
        end
        del_var("gts"..idx)
        del_var("gd"..idx)
        del_var("gp"..idx)
        ogsm.__do_timer_action(name,params)
        return true
    end
    return false
end

function __timer_found_new(idx)
    local time = game.time() --time in seconds since 1970
    local name,params
    if load_var("xd"..idx, nil)<time then
        name=load_var("xt"..idx, nil)
        if load_var("x_tbl"..idx, false) then
            params = unpack_array_from_string(load_var("xp"..idx, nil))
            del_var("x_tbl"..idx)
        else
            params=load_var("xp"..idx, nil)
        end
        del_var("xt"..idx)
        del_var("xd"..idx)
        del_var("xp"..idx)
        --oau_reason=name.." "..params
        ogsm.__do_timer_action(name,params)
        __do_timer_action_new(name,params)
        return true
    end
    return false
end

function angle_diff(a1, a2)
	local b1 = a1:normalize()
	local b2 = a2:normalize()
	local dotp = b1:dotproduct(b2)
	return utils.rad2deg(math.acos(dotp))
end


---------------------------- Библиотека служебных скриптов ----------------------------