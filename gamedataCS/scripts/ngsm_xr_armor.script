local armor_levels={
	cs_novice_outfit = 0,
	mar_quest_novice_outfit_1 = 1,
	cs_light_outfit = 2,
	cs_light_extra_outfit = 3,
	cs_standart_outfit = 4,
	cs_heavy_outfit = 5,
	cs_heavy_extra_outfit = 6,
	novice_outfit = 0,
	novice_outfit_white = 0,
	stalker_light_outfit = 2,
	stalker_outfit = 3,
	scientific_outfit = 5,
	stalker_heavy_outfit = 6,
	exo_outfit = 7,
	digger_novice_outfit = 0,
	bandit_outfit = 0,
	bandit_master_outfit = 2,
	bandit_veteran_outfit = 2,
	bandit_heavy_outfit = 4,
    svoboda_light_outfit = 3,
    svoboda_light2_outfit = 4,
    svoboda_heavy_outfit = 6,
    svoboda_scientific_outfit = 5,
	svoboda_exo_outfit = 7,
    dolg_heavy_extra_outfit = 6,
    dolg_heavy_outfit = 4,
    dolg_outfit = 3,
    dolg_scientific_outfit = 5,
	dolg_exo_outfit = 7,
	killer_outfit = 4,
	killer_outfit_dark = 4,
	killer_scientific_outfit = 6,
	killer_heavy_outfit = 5,
	killer_exo_outfit = 7,
	monolith_light_outfit = 2,
	monolith_outfit = 3,
	monolith_heavy_outfit = 6,
	monolith_scientific_outfit = 5,
	monolith_exo_outfit = 7,
	soldier_outfit_grey = 3,
	soldier_outfit_green = 3,
	soldier_outfit_brown = 3,
	specops_outfit = 4,
	military_outfit = 5,
	military_extra_outfit = 6,
    red_ecolog_outfit = 4,
    green_ecolog_outfit = 5
}

local suits_to_visuals = {
	csky={
		cs_novice_outfit = {[[stalker_nebo\stalker_nebo_6_1]]},
		cs_light_outfit = {[[stalker_nebo\stalker_nebo_1]]},
		cs_light_extra_outfit = {[[stalker_nebo\stalker_nebo_5]]},
		cs_standart_outfit = {[[stalker_nebo\stalker_nebo_3]]},
		cs_heavy_outfit = {[[stalker_nebo\stalker_nebo_2]]},
		cs_heavy_extra_outfit = {[[stalker_nebo\stalker_nebo_4]]}
	},
    --//Таблица костюмов, которые могут одеть сталкеры
	stalker={
		cs_novice_outfit = {[[stalker_nebo\stalker_nebo_6_1]]},
		cs_light_outfit = {[[stalker_nebo\stalker_nebo_1]]},
		cs_light_extra_outfit = {[[stalker_nebo\stalker_nebo_5]]},
		cs_standart_outfit = {[[stalker_nebo\stalker_nebo_3]]},
		cs_heavy_outfit = {[[stalker_nebo\stalker_nebo_2]]},
		cs_heavy_extra_outfit = {[[stalker_nebo\stalker_nebo_4]]},
		
		novice_outfit = {[[stalker_neutral\stalker_neutral_1_1]]},
		novice_outfit_white = {[[stalker_neutral\stalker_neutral_1_6]]},
		stalker_outfit = {[[stalker_neutral\stalker_neutral_2_1]]},
		stalker_light_outfit = {[[stalker_neutral\stalker_neutral_2_8]]},
		scientific_outfit = {[[stalker_neutral\stalker_neutral_5]]},
		stalker_heavy_outfit = {[[stalker_neutral\stalker_neutral_3]]},
		exo_outfit = {[[stalker_neutral\stalker_neutral_4]]},
		
		digger_novice_outfit = {[[stalker_digger\stalker_digger_1_1]]},
		
		bandit_outfit = {[[stalker_bandit\stalker_bandit_1_1]]},
		bandit_veteran_outfit = {[[stalker_bandit\stalker_bandit_3_1]]},
		bandit_master_outfit = {[[stalker_bandit\stalker_bandit_3_2]]},
		bandit_heavy_outfit = {[[stalker_bandit\stalker_bandit_2]]},
		
		svoboda_light_outfit = {[[stalker_freedom\stalker_freedom_1_1]]},
		svoboda_light2_outfit = {[[stalker_freedom\stalker_freedom_2_1]]},
		svoboda_heavy_outfit = {[[stalker_freedom\stalker_freedom_3]]},
		svoboda_scientific_outfit = {[[stalker_freedom\stalker_freedom_5]]},
		svoboda_exo_outfit = {[[stalker_freedom\stalker_freedom_4]]},

        dolg_heavy_extra_outfit = {[[stalker_dolg\stalker_freedom_4]]},
        dolg_outfit = {[[stalker_dolg\stalker_dolg_2_1]]},
        dolg_heavy_outfit = {[[stalker_dolg\stalker_dolg_3_1]]},
        dolg_scientific_outfit = {[[stalker_dolg\stalker_dolg_1]]},
	    dolg_exo_outfit = {[[stalker_dolg\stalker_freedom_3_2]]},
	    
		killer_outfit = {[[stalker_merc\stalker_merc_2]]},
		killer_outfit_dark = {[[stalker_merc\stalker_merc_2_4]]},
		killer_scientific_outfit = {[[stalker_merc\stalker_merc_1]]},
		killer_heavy_outfit = {[[stalker_merc\stalker_merc_3]]},
		killer_exo_outfit = {[[stalker_merc\stalker_merc_4]]},

		monolith_light_outfit = {[[stalker_monolith\stalker_monolith_8]]},
		monolith_outfit = {[[stalker_monolith\stalker_monolith_2_1]]},
		monolith_heavy_outfit = {[[stalker_monolith\stalker_monolith_3]]},
		monolith_scientific_outfit = {[[stalker_monolith\stalker_monolith_1]]},
		monolith_exo_outfit = {[[stalker_monolith\stalker_monolith_4]]},

		soldier_outfit_grey = {[[stalker_soldier\stalker_soldier_1_1]]},
		soldier_outfit_green = {[[stalker_soldier\stalker_soldier_1_5]]},
		soldier_outfit_brown = {[[stalker_soldier\stalker_soldier_5_1]]},
		specops_outfit = {[[stalker_soldier\stalker_soldier_2]]},
		military_outfit = {[[stalker_soldier\stalker_soldier_4_2]]},
		military_extra_outfit = {[[stalker_soldier\stalker_soldier_4_1]]},

		red_ecolog_outfit = {[[stalker_ecolog\ecolog_red]]},
		green_ecolog_outfit = {[[stalker_ecolog\ecolog_green]]}
	},
	--//Таблица костюмов, которые могут одеть бандиты и "Ренегаты"
	bandit={
		cs_novice_outfit = {[[stalker_nebo\stalker_nebo_6_1]]},
		cs_light_outfit = {[[stalker_nebo\stalker_nebo_1]]},
		cs_light_extra_outfit = {[[stalker_nebo\stalker_nebo_5]]},
		cs_standart_outfit = {[[stalker_nebo\stalker_nebo_3]]},
		cs_heavy_outfit = {[[stalker_nebo\stalker_nebo_2]]},
		cs_heavy_extra_outfit = {[[stalker_nebo\stalker_nebo_4]]},
		
		novice_outfit = {[[stalker_neutral\stalker_neutral_1_1]]},
		novice_outfit_white = {[[stalker_neutral\stalker_neutral_1_6]]},
		stalker_outfit = {[[stalker_neutral\stalker_neutral_2_1]]},
		stalker_light_outfit = {[[stalker_neutral\stalker_neutral_2_8]]},
		scientific_outfit = {[[stalker_neutral\stalker_neutral_5]]},
		stalker_heavy_outfit = {[[stalker_neutral\stalker_neutral_3]]},
		exo_outfit = {[[stalker_neutral\stalker_neutral_4]]},
		
		digger_novice_outfit = {[[stalker_digger\stalker_digger_1_1]]},
		
		bandit_outfit = {[[stalker_bandit\stalker_bandit_1_1]]},
		bandit_veteran_outfit = {[[stalker_bandit\stalker_bandit_3_1]]},
		bandit_master_outfit = {[[stalker_bandit\stalker_bandit_3_2]]},
		bandit_heavy_outfit = {[[stalker_bandit\stalker_bandit_2]]},
		
		svoboda_light_outfit = {[[stalker_freedom\stalker_freedom_1_1]]},
		svoboda_light2_outfit = {[[stalker_freedom\stalker_freedom_2_1]]},
		svoboda_heavy_outfit = {[[stalker_freedom\stalker_freedom_3]]},
		svoboda_scientific_outfit = {[[stalker_freedom\stalker_freedom_5]]},
		svoboda_exo_outfit = {[[stalker_freedom\stalker_freedom_4]]},
		
        dolg_heavy_extra_outfit = {[[stalker_dolg\stalker_freedom_4]]},
        dolg_outfit = {[[stalker_dolg\stalker_dolg_2_1]]},
        dolg_heavy_outfit = {[[stalker_dolg\stalker_dolg_3_1]]},
        dolg_scientific_outfit = {[[stalker_dolg\stalker_dolg_1]]},
	    dolg_exo_outfit = {[[stalker_dolg\stalker_freedom_3_2]]},
	    
		killer_outfit = {[[stalker_merc\stalker_merc_2]]},
		killer_outfit_dark = {[[stalker_merc\stalker_merc_2_4]]},
		killer_scientific_outfit = {[[stalker_merc\stalker_merc_1]]},
		killer_heavy_outfit = {[[stalker_merc\stalker_merc_3]]},
		killer_exo_outfit = {[[stalker_merc\stalker_merc_4]]},

		monolith_light_outfit = {[[stalker_monolith\stalker_monolith_8]]},
		monolith_outfit = {[[stalker_monolith\stalker_monolith_2_1]]},
		monolith_heavy_outfit = {[[stalker_monolith\stalker_monolith_3]]},
		monolith_scientific_outfit = {[[stalker_monolith\stalker_monolith_1]]},
		monolith_exo_outfit = {[[stalker_monolith\stalker_monolith_4]]},

		soldier_outfit_grey = {[[stalker_soldier\stalker_soldier_1_1]]},
		soldier_outfit_green = {[[stalker_soldier\stalker_soldier_1_5]]},
		soldier_outfit_brown = {[[stalker_soldier\stalker_soldier_5_1]]},
		specops_outfit = {[[stalker_soldier\stalker_soldier_2]]},
		military_outfit = {[[stalker_soldier\stalker_soldier_4_2]]},
		military_extra_outfit = {[[stalker_soldier\stalker_soldier_4_1]]},

		red_ecolog_outfit = {[[stalker_ecolog\ecolog_red]]},
		green_ecolog_outfit = {[[stalker_ecolog\ecolog_green]]}
	},
	freedom={
		svoboda_light_outfit = {[[stalker_freedom\stalker_freedom_1_1]]},
		svoboda_light2_outfit = {[[stalker_freedom\stalker_freedom_2_1]]},
		svoboda_heavy_outfit = {[[stalker_freedom\stalker_freedom_3]]},
		svoboda_scientific_outfit = {[[stalker_freedom\stalker_freedom_5]]},
		svoboda_exo_outfit = {[[stalker_freedom\stalker_freedom_4]]}
	},
	dolg={
        dolg_heavy_extra_outfit = {[[stalker_dolg\stalker_freedom_4]]},
        dolg_outfit = {[[stalker_dolg\stalker_dolg_2_1]]},
        dolg_heavy_outfit = {[[stalker_dolg\stalker_dolg_3_1]]},
        dolg_scientific_outfit = {[[stalker_dolg\stalker_dolg_1]]},
	    dolg_exo_outfit = {[[stalker_dolg\stalker_freedom_3_2]]},
	}
}

armors = {}

local update_on=0
local tmp_id
function npc_update(binder)
	local npc = binder.object
	local npc_id = npc:id()
	if npc_id~=tmp_id and update_on<time_global() then
		update_on=time_global() + 250
		tmp_id = npc_id
		if (binder.armor_check_update or 0)<time_global() then
			binder.armor_check_update=time_global()+1500
			local com = npc:character_community()
			--//Max Warlock: Чтобы не дублировать таблицу
			if com == "renegade" then
			    com = "bandit"
			end
			--//
			if suits_to_visuals and suits_to_visuals[com] then
				npc:iterate_inventory(check_armor,npc)
			end
		end
	end
end

function check_armor(npc, item)
	local npc_id = npc:id()
	local npc_name = npc:name()
	local snpc = alife():object(npc_id)
	if snpc then
	    local ch_npc = level.object_by_id(snpc.id)
		if ch_npc then
		    local money = snpc.offmoney
		    if money and money ~= -1 and money ~= 0 then
			    npc:give_money(money) 
			    game_stats.money_quest_update(money) 
			    snpc.offmoney = nil
		    end
		    if item and item:section() and string.find(item:section(),"outfit") then
			    local sotf = alife():object(item:id())
			    if sotf then
				    sotf.pid = npc_id
				    if sotf.con then
					    local lotf = level.object_by_id(item:id())
					    if lotf then
						    lotf:set_condition(sotf.con)
					    end
				    end
				    sotf.con = nil
				    local com = npc:character_community()
				    --//Max Warlock: Чтобы не дублировать таблицу
			        if com == "renegade" then
			            com = "bandit"
			        end
			        --//
				    if IsStalker(npc) and npc:alive() and snpc:health()>0.3 and com~="zombied" and com~="ecolog" and com~="monolith" and com~="killer" and com~="army" and not string.find(npc_name,"zombi")  and not ngsm.IsTrader(snpc) and ngsm.IsSim(npc) then
					    if npc_id ~= sotf.none then
						    local vis = get_visual(sotf)
						    if vis and suits_to_visuals[com][vis] and armor_levels[vis] and #suits_to_visuals[com][vis]>0 then
							    if armors[npc_id] == nil then
								    armors[npc_id] = {}
							    end
							    table.insert(armors[npc_id],sotf)
							    sotf.vis = vis
						    end
					    end
				    end
			    end
		    end
		end
		if IsStalker(npc) and npc:id() ~= db.actor:id() and not npc:alive() and armors[npc_id] and snpc.offmoney ~= -1 then
			armors[npc_id] = nil
		end
	end
end

local change_on=0
function change()
	if change_on<time_global() and armors then
		change_on=time_global() + 1500
		for npc_id,tabl in pairs(armors) do   
			local snpc = alife():object(npc_id)
            if snpc then
			    local npc = level.object_by_id(snpc.id)
			    if npc then
				    local actor = db.actor
				    if (ngsm.angle_diff(actor:direction(), actor:position():sub(npc:position()))<90 and npc:position():distance_to(actor:position()) > 2.5) or not actor:see(npc) or npc:position():distance_to(actor:position())>100 then
					    if not npc:alive() then
						    if snpc.offmoney == -1 then
							    local t = ngsm_netpackets.read_stalker_params_new(npc_id)
							    if t then
								    local vistest = t.visual_name
								    if vistest and type(vistest)=="string" and string.find(vistest,"actors\\stalker") then
									    t.visual_name = "actors\\stalker_special\\stalker_dead"
									    ngsm_netpackets.write_stalker_params_new(t,npc_id,1)
								    end
							    end
							    snpc.offmoney = nil
							    armors[npc_id] = nil
							    return
						    end
					    else
						    local numtabl = #tabl
						    if numtabl > 0 then
							    if numtabl > 1 then
								    table.sort(tabl,function(a,b) return armor_levels[a:section_name()] > armor_levels[b:section_name()] end)
							    end
							    local sotf = alife():object(tabl[1].id)
							    if sotf then
								    local otf_id = sotf.id
								    for n,tmp in pairs(tabl) do
									    if tmp.id ~= otf_id then
										    alife():object(tmp.id).none = npc_id
									    end
								    end
								    local vis  = sotf.vis
								    if vis and npc_id and npc_id ~= sotf.none then
									    local sectcur
									    local viscur
									    local arm_levcur
									    local viscur = ngsm_marauder.get_stalker_visual(snpc)
									    if viscur then
										    if type(viscur)=="string" and (string.find(viscur,"actors\\stalker") or string.find(viscur,"actors\\mp_team")) then
											    viscur = ogsm.str_explode("\\",viscur)
											    viscur = viscur[3]
											    --sectcur = get_current_visual(viscur)
											    sectcur = ngsm_marauder.get_section(viscur)
											    if sectcur then
												    arm_levcur = armor_levels[sectcur]
												    if not arm_levcur then
													    arm_levcur = 8
												    end
											    else
												    arm_levcur = 8
											    end
											        local upgrnew
											        local tn = ngsm_netpackets.read_outfit_params(otf_id)
											        if tn then
												        local tne,tnu = tn.extra_data,tn.upd_extra_data
												        if tne and type(tne)=="table" and #tne==0 and tnu and type(tnu)=="table" and #tnu==0 then
													        upgrnew = tn.upgrades
												        end
											        end
											            local arm_levotf = armor_levels[vis]
											            if sectcur and arm_levotf and arm_levcur and (arm_levotf > arm_levcur or (arm_levotf >= arm_levcur and upgrnew and #upgrnew>0)) then
												            local sotfcur = alife():create(sectcur, snpc.position, snpc.m_level_vertex_id, snpc.m_game_vertex_id, npc_id)
												        if sotfcur then
													        sotfcur.pid = npc_id
													        sotfcur.none = npc_id
													        local upgr = snpc.upg
													        if upgr then
														        if type(upgr)=="table" then
															        if #upgr>0 then
																        local tc = ngsm_netpackets.read_outfit_params(sotfcur.id)
																        if tc then 
																	        local tce,tcu = tc.extra_data,tc.upd_extra_data
																	        if tce and type(tce)=="table" and #tce==0 and tcu and type(tcu)=="table" and #tcu==0 then
																		        tc.upgrades = upgr
																		        ngsm_netpackets.write_outfit_params(tc,sotfcur.id)
																	        end
																        end
															        end
														        end
													        end
													        local cond = count_cond(npc_id,viscur, sectcur, nil)
													        if cond then
														        local condold = snpc.con
														        if condold then 
															        cond = cond-1+condold
														        end
														        sotfcur.con = cond				
													        end
												        end
												        if arm_levotf > arm_levcur then
													        snpc:set_rank(270*arm_levcur+math.random(1,50))
												        end
												        local otf = level.object_by_id(otf_id)
												        if otf then
													        snpc.con = otf:condition()
												        end
												        if upgrnew and #upgrnew>0 then
													        snpc.upg = upgrnew
												        else
													        snpc.upg = {}
												        end
												        local com = npc:character_community()
												        --//Max Warlock: Чтобы не дублировать таблицу
												        if com == "renegade" then
													        com = "bandit"
												        end
												        --//
												local visnew = "actors\\"..suits_to_visuals[com][vis][math.random(#suits_to_visuals[com][vis])]
												local t = ngsm_netpackets.read_stalker_params_new(npc_id)
												if t then
													local vistest = t.visual_name
													if vistest and type(vistest)=="string" and string.find(vistest,"actors\\stalker") then
														t.visual_name = visnew
														ngsm_netpackets.write_stalker_params_new(t,npc_id,1)
													end
												    end
												    alife():release(sotf,true)
											    else
												    sotf.none = npc_id
											    end
											    armors[npc_id] = nil
										    end
									    end
								    end
							    end
						    end
						    return
						end
					end
				end
			end
		end
	end
end

function get_visual(obj)
	local section
	if obj and obj.fov then
		section = obj:section()
	else
		section = obj:section_name()
	end
	local sini = system_ini()
	local vis = ngsm.read_if_exist_str(sini, section, "visual", "")
	if vis ~= "" then
		vis = ogsm.str_explode("\\",vis)
		vis = ogsm.str_explode(".",vis[3])
		vis = vis[1]
		return vis
	end
end

bone_indexes = {}

function hit_check(obj, amount, local_direction, who, bone_index)
    local id = obj:id()
	local snpc = alife():object(id)
	if snpc then
		if not snpc.bonex then
			local bon = snpc.bon
			if bon then
				if type(bon)=="table" then
					if #bon>0 then
						bone_indexes[id] = bon
					end
				else
					snpc.bonex = true
				end
			end
		end
		local bones	= {	
			--  голова
			{14,15,16,17,19},
			--  таз, торс, спина
			{2,11,12,13,20,33},
			--  бёдра, голени
			{3,7,4,8},
			--  плечи, предплечья
			{21,34,22,35},
			--  ступни, кисти
			{5,6,9,10,23,24,27,30,36,37,40,43}
		}
		if 	 bone_indexes[id]==nil then
				 bone_indexes[id] = {}
		end
		for i=1,#bones do
			if bone_indexes[id][i]==nil then
				bone_indexes[id][i] = 1
				break
			end
			local tbon = bones[i]
			for j=1,#tbon do
			   if tbon[j] == bone_index then 
					bone_indexes[id][i] = bone_indexes[id][i] + 1
				end
			end
		end
		snpc.bon = bone_indexes[id]
    end
end

--  куртки
local table_jacket_outfits = {
    cs_novice_outfit = true,
    novice_outfit = true,
    novice_outfit_white = true,
    bandit_outfit = true,
    digger_novice_outfit = true
}
--  плащи	
local table_rain_outfits = {
    bandit_veteran_outfit = true,
    bandit_master_outfit = true
}

--  костюмы без шлема или противогаза	
local table_without_helmet_outfits = {
	cs_light_outfit = true,
	cs_light_extra_outfit = true,
	stalker_outfit = true,
	stalker_light_outfit = true,
	bandit_heavy_outfit = true,
	svoboda_light_outfit = true,
	svoboda_light2_outfit = true,
	dolg_outfit = true,
	killer_outfit_dark = true,
	killer_outfit = true,
	monolith_light_outfit = true,
	monolith_outfit = true,
	soldier_outfit_grey = true,
	soldier_outfit_green = true,
	soldier_outfit_brown = true
}
	
--  костюмы со шлемом или противогазом
local table_with_helmet_outfits = {
    cs_standart_outfit = true,
    cs_heavy_outfit = true,
    cs_heavy_extra_outfit = true,
    stalker_heavy_outfit = true,
    svoboda_heavy_outfit = true,
    dolg_heavy_outfit = true,
    dolg_heavy_extra_outfit = true,
    killer_heavy_outfit = true,
    monolith_heavy_outfit = true,
    specops_outfit = true,
    military_outfit = true,
    military_extra_outfit = true
}

--  костюмы с замкнутым циклом
local table_cycle_outfits = {
    scientific_outfit = true,
    dolg_scientific_outfit = true,
    svoboda_scientific_outfit = true,
    killer_scientific_outfit = true,
    monolith_scientific_outfit = true,
    red_ecolog_outfit = true,
    green_ecolog_outfit = true
}

-- экзоскелеты
local table_exo_outfits = {
    exo_outfit = true,
    dolg_exo_outfit = true,
    svoboda_exo_outfit = true,
    killer_exo_outfit = true,
    monolith_exo_outfit = true
}
	
function count_cond(id,vis, sect, rnd)
	local wear
	if not rnd then
		local snpc = alife():object(id)
		if snpc then
			local bon = snpc.bon
			if bon then
				if type(bon)=="table" then
					if #bon>0 then
						bone_indexes[id] = bon
					end
				end
			end
			local tabl = bone_indexes[id]
			if tabl and #tabl>0 then
				local wear1,wear2,wear3,wear4,wear5 = 0,0,0,0,0
				if table_jacket_outfits[sect] then
					if tabl[2] then wear2 = tabl[2]*10 end
					if tabl[5] then wear5 = tabl[5]*3 end 
					wear = wear2 + wear5
				elseif table_rain_outfits[sect] then
					if tabl[2] then wear2 = tabl[2]*10 end
					if tabl[3] then wear3 = tabl[3]*7.5 end
					if tabl[5] then wear5 = tabl[5]*3 end 
					wear = wear2 + wear3 + wear5
				elseif table_without_helmet_outfits[vis] then
					if tabl[2] then wear2 = tabl[2]*10 end
					wear = wear2
				elseif table_with_helmet_outfits[vis] then
					if tabl[1] then wear1 = tabl[1]*20 end
					if tabl[2] then wear2 = tabl[2]*10 end
					wear = wear1 + wear2
				elseif table_cycle_outfits[sect] then
					if tabl[1] then wear1 = tabl[1]*20 end
					if tabl[2] then wear2 = tabl[2]*10 end
					if tabl[3] then wear3 = tabl[3]*7.5 end
					if tabl[4] then wear4 = tabl[4]*5 end
					if tabl[5] then wear5 = tabl[5]*3 end 
					wear = wear1 + wear2 + wear3 + wear4 + wear5
				elseif table_exo_outfits[sect] then
					if tabl[1] then wear1 = tabl[1]*20 end
					if tabl[2] then wear2 = tabl[2]*10 end
					if tabl[3] then wear3 = tabl[3]*7.5 end
					if tabl[4] then wear4 = tabl[4]*5 end
					if tabl[5] then wear5 = tabl[5]*3 end 
					wear = (wear1 + wear2 + wear3 + wear4 + wear5)*1.3
				end
				bone_indexes[id] = nil
				snpc.bon = {}
			end
		end
	end	
	if rnd then
	    wear = math.random(25,65)
	elseif wear == nil then
	    wear = math.random(0,5)
	elseif wear <  5 then
	    wear = math.random(5,15) 
	elseif wear >  95 then
	    wear = math.random(85,95)
	elseif wear <= 95 and wear >= 5 then
	    wear = wear
	else
	    wear = 0
	end
	return (100-wear)/100
end