-- File:   Hides
-- Author: Shoker
-- Отсиживаемся в укрытии
---------------------- 

local MAX_HIDE_DISTANCE	= 210 --\\ Если укрытие далеко от НПС, то он не побежит в него
local JOB_ARIVLE_DIS	= 4	  --\\ Дистанция, на которой НПС считается прибывшим на работу
local BASE_RADIUS		= 1.2 --\\ Дистанция, на которой НПС садится в центре базы
local JOB_RADIUS		= 0.6 --\\ Дистанция, на которой НПС садится в точке работы

--[[
 NPC бегут в укрытия, если укрытие далеко - тоже садимся.
 ]]

-- Короче отключение стеэйт менеджера не надо делать, из за этого НПС начинает колбасить
local action = {} -- таблица с текущими действиями нпс
local states_surge = {"wait", "guard", "guard_chasovoy", "ward", "sit", "sit_knee", "sit_ass", "sit_ass_noweap", "sleep", "trans_0", "trans_1"}
---------------------------------

local jobs_indx = ngsm.load_table("sm_hides_jobs")
local update_jobs_list = false
local hides = ngsm_hides_list.get()

--' Возвращает таблицу с двумя цифрами (индекс в таблице укрытий, и индекс в таблице работ этого укрытия)
function getCover(npc)
    --/ Проверяем, не была ли нам уже присвоена работа
    if jobs_indx[npc:id()] then
        if jobs_indx[npc:id()].init then
	    -- уже есть работа, возвращаем
	        return jobs_indx[npc:id()].index	-- tbl
        end
    end
    local htbl = hides[level.name()]
    local p = npc:position() 
    local last_distance = -1
    local last_base 
    local base_tbl = {}
    local res = {}
    if htbl == nil then
	    return "no_base"
	end
    -- Шаг 1: Отсеиваем по базам
    for i=1, #htbl do 
        local tbl = htbl[i]
        local valid_base = true
	    if tbl.smart and tbl.smart ~= "none" then
		    local smart = ngsm.SMARTS[tbl.smart]
		    local smart_player = smart.player_name
		    if smart_player and smart_player ~= "none" then
			    if ngsm.get_faction_relation(npc:character_community(), smart_player) == "enemy" then
			        valid_base = false
			   end
		    end
	    end
	    if valid_base then
		    local base = vector():set(tbl.base[1],tbl.base[2],tbl.base[3])
		    dtb = p:distance_to(base)
		    if last_distance == -1 then last_distance = dtb end
		        if dtb <= last_distance then
			        last_distance = dtb
			base_tbl[5] = base_tbl[4] 
			base_tbl[4] = base_tbl[3] 
			base_tbl[3] = base_tbl[2] 
			base_tbl[2] = base_tbl[1] 
			base_tbl[1] = {i, dtb, base, tbl} 
			res[1] = i
		  end
	  end
 end

 
 local max_dist = MAX_HIDE_DISTANCE
 
 if last_distance > max_dist or res[1] == nil then return "no_base" end

 -- Шаг 2: Отсеиваем по работам
 local bjob = getJob(res[1])

 if bjob then
    setJob(npc:id(), res[1], bjob)
 else
  for i=2, 5 do
   max_dist = MAX_HIDE_DISTANCE
   if base_tbl[i] then
    if base_tbl[i][4].search_radius then
	   max_dist = base_tbl[i][4].search_radius 
    end   
    if p:distance_to(base_tbl[i][3]) <= math.floor(max_dist / 2) then
     bjob = getJob(base_tbl[i][1])
    
     if bjob then
   	 setJob(npc:id(), base_tbl[i][1], bjob)
	 res[1] = base_tbl[i][1]
     end

    end
   else
    break
   end
  end
 end


 res[2] = bjob


 -- не нашли работы, тогда посылаем в "базу" 
 if res[2]==nil then
    res[2] = "base"
 end

 return res -- возвращает таблицу с двумя табличными индексами (индекс укрытия и индекс работы)
end


-- Возвращает индекс свободной работы или nil
function getJob(base_idx)
  local htbl = hides[level.name()]
  local tbl = htbl[base_idx]
  local jobs = tbl.jobs

  for i = 1, #jobs do
   if not jobs_indx["ind"..tostring(base_idx)..tostring(i)] then -- Работа ещё не занята
 	 return i 
   end
  end

  return 
end

-- Указываем нашу работу
function setJob(npc_id, idx_1, idx_2)
    jobs_indx["ind"..tostring(idx_1)..tostring(idx_2)] = true
    if not jobs_indx[npc_id] then
        jobs_indx[npc_id] = {}
    end
    jobs_indx[npc_id].init = true
    jobs_indx[npc_id].index = {idx_1, idx_2} 
    ngsm.save_table("sm_hides_jobs", jobs_indx)
end

function Start()
    ngsm.save_var("sm_is_hiding", true)
end

function Stop()
 ngsm.save_var("sm_is_hiding", false)
 ngsm.save_table("sm_hides_jobs", {})
 cleared_anims = {}
end

function IsHiding()
    return ngsm.load_var("sm_is_hiding", false)
end


----------------------------------------------------------------------------------------------------
--/ SCHEME HIDE_FROM_SURGE
----------------------------------------------------------------------------------------------------
-- Акт 1: Ищем укрытие, и движемся к нему. 

class "evaluator_surge_hider" (property_evaluator)

function evaluator_surge_hider:__init(name, storage, object) super(nil, name)
	self.st 	= storage
	self.npc	= object
	self.npc_id	= object:id()
end

local inited_npc_tbl = {}

function on_npc_offline(obj)
 inited_npc_tbl[obj:id()] = nil
end

function evaluator_surge_hider:evaluate()	
    if not ngsm.IsSim(self.npc) then
	    return false
	end
	if self.st.surge_in_hide then
		return false
	end
	if self.npc:character_community() == "zombied" then
		return false
	end
	local bd = self.npc:best_danger()
	if bd and bd:type() == danger_object.grenade then
      	return false
	end
	local be = self.npc:best_enemy()
	if be then
		return false
	end
	if self.mgr == nil then
		self.mgr = self.npc:motivation_action_manager()
	end
	if self.mgr:evaluator(xr_evaluators_id.sidor_wounded_base):evaluate() then
		return false 
	end
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() then
		return false
	end
	local tvalue = inited_npc_tbl[self.npc_id]
	if tvalue == nil then
	   inited_npc_tbl[self.npc_id] =  time_global() + 6000 
	else
	    if type(tvalue) == "number" then
		    if tvalue < time_global() then
		        inited_npc_tbl[self.npc_id] = true
		    end
	    else
		    return IsHiding()
	   end
	end
	return false
end

----------------------------------------------------------------------------------------------------
--/ ACTION
----------------------------------------------------------------------------------------------------

class "action_surge_hider" (action_base)

-- Вызывается при загрузке НПС 1 раз
function action_surge_hider:__init (npc, action_name, storage) super (nil, action_name)
	self.st = storage
	self.npc	= npc
	self.npc_id	= npc:id()
	action[self.npc_id] = {}
	action[self.npc_id].loaded = true
end

function action_surge_hider:initialize()
	action_base.initialize(self)
	local npc = self.npc
	
	if not update_jobs_list then
	   jobs_indx = ngsm.load_table("sm_hides_jobs")
	   update_jobs_list = true
	end

	--/ ориентируем
	npc:set_desired_position()
	npc:set_desired_direction()

	--/ задаем параметры движения
	npc:set_detail_path_type(move.line)
	npc:set_path_type(game_object.level_path)
	npc:movement_enabled(true)
	npc:set_movement_type(move.walk)
	npc:set_body_state(move.standing) --/ move.standing or move.crouch

	--/ освобождаем от всех ограничений
	npc:remove_all_restrictions()

	--/ сбрасываем текущие анимации
	npc:clear_animations()

	--/ ищем укрытие
	self.st.cover = getCover(npc)
	self.st.surge_in_hide = false
	
	action[self.npc_id].init = true
end

function action_surge_hider:execute()
	action_base.execute(self)

	local npc =  self.npc
	local st = self.st
	local cover = st.cover

	if cover == "no_base" then	-- это сюжетный пёрс или слишком далеко, просто садим его
	  st.surge_in_hide = true
	  return
	end
	
	local htbl = hides[level.name()]

	if cover[2] == "base" then
		local tbl = htbl[cover[1]].base
		self.st.cover_pos = vector():set(tbl[1],tbl[2],tbl[3])	 
		self.st.cover_look = vector():set(tbl[1],tbl[2],tbl[3])	
		self.st.cover_mode = "base" 
	else
		local tbl  = htbl[cover[1]].jobs[cover[2]]
		self.st.cover_pos  = vector():set(tbl.point[1],tbl.point[2],tbl.point[3])	 
		self.st.cover_look = vector():set(tbl.look[1],tbl.look[2],tbl.look[3])	 
		self.st.cover_mode = "job" 
	end
	local dlv =  level.vertex_id(self.st.cover_pos)			 -- Точка назначения
	local dpos = npc:position():distance_to(self.st.cover_pos)	 -- Расстояние до точки назначения
	if dpos > JOB_ARIVLE_DIS then	-- Фаза 1: Бежим до работы
		 npc:set_movement_type(move.run)
		 utils.send_to_nearest_accessible_vertex(npc, dlv)
	else -- ВРаботе, ищем точку, чтобы пересидеть. (Переключаем на другую схему)
		 st.surge_in_hide = true
	end
end

function action_surge_hider:finalize()
	action_base.finalize(self)
end

---------------------------------------------------

-- Акт 2: Ждём окончание выброса 

class "evaluator_surge_hider_wait" (property_evaluator)
function evaluator_surge_hider_wait:__init(name, storage, object) super (nil, name)
	self.st = storage
	self.npc	= object
	self.npc_id	= object:id()	
end


function evaluator_surge_hider_wait:evaluate()
	local bd = self.npc:best_danger()
	if bd and bd:type() == danger_object.grenade then
      	return false
	end
	local be = self.npc:best_enemy()
	if be then
		return false
	end
	if self.mgr == nil then
		self.mgr = self.npc:motivation_action_manager()
	end
	if self.mgr:evaluator(xr_evaluators_id.sidor_wounded_base):evaluate() then
		return false 
	end
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() then
		return false
	end
	local tvalue = inited_npc_tbl[self.npc_id]
	if tvalue == nil then
	   inited_npc_tbl[self.npc_id] =  time_global() + 6000 
	else
	   if type(tvalue) == "number" then
		if tvalue < time_global() then
		   inited_npc_tbl[self.npc_id] = true
		end
	   else
		return (IsHiding() and self.st.surge_in_hide)
	   end
	end
	return false
end


class "action_surge_hider_wait" (action_base)

-- Вызывается при загрузке НПС 1 раз
function action_surge_hider_wait:__init (npc, action_name, storage) super (nil, action_name)
	self.st = storage
	self.npc	= npc
	self.npc_id	= npc:id()
	 
  self.state = states_surge[math.random(#states_surge)]

end

function action_surge_hider_wait:initialize()
	action_base.initialize(self)
	
	--/ в укрытии, найдём точку.
	local cover = self.st.cover

	if cover == "no_base" then return end

	self.place_pos	 = self.st.cover_pos
    self.place_lv	 = level.vertex_id(self.place_pos)
	self.place_look  = self.st.cover_look
	self.place_mode  = self.st.cover_mode

end


local cleared_anims = {}

function action_surge_hider_wait:execute()
	action_base.execute(self)
	local npc = self.npc
	local cover = self.st.cover
	if cover == "no_base" then -- это сюжетный персонаж
	  if not cleared_anims[self.npc:id()] then
	   --/ сбрасываем текущие анимации
	   npc:clear_animations()
	   cleared_anims[self.npc:id()] = true
	  end
	 
	  local state = "sit"
	  
	  if cover == "no_base" then
		if ngsm.IsSurge() then
		 state = "psy_pain"
		end
	  end
	  
	  state_mgr.set_state(npc, state)
	  return
	end


	if self.place_mode == "base" then
	------------------------------------
	 if not (self.place_pos:distance_to(npc:position()) <= BASE_RADIUS) then
	  npc:set_movement_type(move.walk)
	  utils.send_to_nearest_accessible_vertex(npc, self.place_lv)
	 else
	  state_mgr.set_state(npc, self.state, nil, nil, {look_position = self.place_look})
	 end
	------------------------------------
	else -- "job"
	------------------------------------
	
	 if not (self.place_pos:distance_to(npc:position()) <= JOB_RADIUS) then
	  npc:set_movement_type(move.walk)
	  utils.send_to_nearest_accessible_vertex(npc, self.place_lv)
	 else
	  state_mgr.set_state(npc, self.state, nil, nil, {look_position = self.place_look})
	 end
	end
	
end

function action_surge_hider_wait:finalize()
	action_base.finalize(self)
	self.st.surge_in_hide = nil
	self.st.cover = nil
end


----------------------------------------------------------------------
--/ SCHEME PARTs (глобальные переменные)
----------------------------------------------------------------------
evid_surge_hider  = 19099
evid_surge_hider_wait = evid_surge_hider + 1
acid_surge_hider = evid_surge_hider
acid_surge_hider_wait = evid_surge_hider_wait

-- 	surge_hider_wait

----------------------------------------------------------------------------------------------------
--/ BINDER
----------------------------------------------------------------------------------------------------
function add_to_binder(object, ini, scheme, section, storage)

	local property_wounded    = xr_evaluators_id.sidor_wounded_base
	local property_idlecombat = xr_evaluators_id.state_mgr + 3

	local manager = object:motivation_action_manager()
	
	--/ Evaluators
	manager:add_evaluator(evid_surge_hider,	 	this.evaluator_surge_hider		("surge_hider", storage, object))
	manager:add_evaluator(evid_surge_hider_wait, 	this.evaluator_surge_hider_wait	("surge_hider_wait", storage, object))

	--/ Actions
	-- Бежим
	local action = this.action_surge_hider(object, "surge_hider", storage)
	action:add_precondition (world_property(stalker_ids.property_alive, true))
	action:add_precondition (world_property(stalker_ids.property_enemy, false))
	action:add_precondition (world_property(property_wounded, false))
	action:add_precondition (world_property(property_idlecombat, true)) --/#?# отключаем стэйт-менеджер
	action:add_precondition (world_property(evid_surge_hider, true))
	action:add_effect       (world_property(evid_surge_hider, false))
	manager:add_action	    (acid_surge_hider, action)
	-- Сидим
	local action = this.action_surge_hider_wait(object, "surge_hider_wait", storage)
	action:add_precondition (world_property(stalker_ids.property_alive, true))
	action:add_precondition (world_property(stalker_ids.property_enemy, false))
	action:add_precondition (world_property(property_wounded, false))
	action:add_precondition (world_property(evid_surge_hider_wait, true)) -- выброс 
	action:add_precondition (world_property(evid_surge_hider, false)) -- мы уже спрятались? 

	action:add_effect       (world_property(evid_surge_hider_wait, false))

	manager:add_action(acid_surge_hider_wait, action)
	--/
	action = manager:action (xr_actions_id.alife)
	action:add_precondition (world_property(evid_surge_hider, false))
	action:add_precondition (world_property(evid_surge_hider_wait, false))
	--/
	action = manager:action (stalker_ids.action_combat_planner)
	action:add_precondition (world_property(evid_surge_hider, false))
	action:add_precondition (world_property(evid_surge_hider_wait, false))
	--/
	action = manager:action (stalker_ids.action_danger_planner)
	action:add_precondition (world_property(evid_surge_hider, false))
	action:add_precondition (world_property(evid_surge_hider_wait, false))
	--/
	action = manager:action (stalker_ids.action_anomaly_planner)
	action:add_precondition (world_property(evid_surge_hider, false))
	action:add_precondition (world_property(evid_surge_hider_wait, false))
end

function set_scheme(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.enabled			= true	
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end