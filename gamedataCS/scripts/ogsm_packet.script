------------------------- Copyright 2007-2011 xStream & DEXXX -------------------------
-------------------------------- Работа с нет-пакетами --------------------------------

local stpk=net_packet()
local uppk=net_packet()


function readvu32u8(packet)
  local v={}
  local len=packet:r_s32()
  for i=1,len,1 do
    table.insert(v,packet:r_u8())
  end
  return v
end

function readvu8u8(packet)
  local v={}
  local len=8
  for i=1,len,1 do
    table.insert(v,packet:r_u8())
  end
  return v
end

function readvu32u16(packet)
  local v={}
  local len=packet:r_s32()
  for i=1,len,1 do
    table.insert(v,packet:r_u16())
  end
  return v
end

function writevu32u8(pk,v)
  local len=table.getn(v)
  pk:w_s32(len)
  for i=1,len,1 do
    pk:w_u8(v[i])
  end
end

function writevu8u8(pk,v)
  local len=8 --table.getn(v)
  --pk:w_u8(len)
  for i=1,len,1 do
    pk:w_u8(v[i])
  end
end

function writevu32u16(pk,v)
  local len=table.getn(v)
  pk:w_s32(len)
  for i=1,len,1 do
    pk:w_u16(v[i])
  end
end

function parse_object_packet(ret,stpk,updpk)
  ret.gvid=stpk:r_u16()
  ret.obf32u1=stpk:r_float()
  ret.obs32u2=stpk:r_s32()
  ret.lvid=stpk:r_s32()
  ret.oflags=stpk:r_s32()
  ret.custom=stpk:r_stringZ()
  ret.sid=stpk:r_s32()
  ret.obs32u3=stpk:r_s32()
  return ret
end

function fill_object_packet(ret,stpk,updpk)
  stpk:w_u16(ret.gvid)
  stpk:w_float(ret.obf32u1)
  stpk:w_s32(ret.obs32u2)
  stpk:w_s32(ret.lvid)
  stpk:w_s32(ret.oflags)
  stpk:w_stringZ(ret.custom)
  stpk:w_s32(ret.sid)
  stpk:w_s32(ret.obs32u3)
end


function parse_visual_packet(ret,stpk,updpk)
  ret.visual=stpk:r_stringZ()
  ret.vsu8u1=stpk:r_u8()
  return ret
end

function fill_visual_packet(ret,stpk,updpk)
  stpk:w_stringZ(ret.visual)
  stpk:w_u8(ret.vsu8u1)
end

function parse_dynamic_object_visual(ret,stpk,updpk)
  parse_object_packet(ret,stpk,updpk)
  parse_visual_packet(ret,stpk,updpk)
  return ret
end

function fill_dynamic_object_visual(ret,stpk,updpk)
  fill_object_packet(ret,stpk,updpk)
  fill_visual_packet(ret,stpk,updpk)
end

function parse_creature_packet(ret,stpk,updpk)
  parse_dynamic_object_visual(ret,stpk,updpk)
  ret.team=stpk:r_u8()
  ret.squad=stpk:r_u8()
  ret.group=stpk:r_u8()
  ret.health=stpk:r_float()
  ret.crvu32u16u1=readvu32u16(stpk)
  ret.crvu32u16u2=readvu32u16(stpk)
  ret.cru16u3=stpk:r_u16()
  ret.crvu8u8u4=readvu8u8(stpk)

  ret.updhealth=updpk:r_float()
  ret.upds32u1=updpk:r_s32()
  ret.updu8u2=updpk:r_u8()
  ret.updpos={}
  ret.updpos.x=updpk:r_float()
  ret.updpos.y=updpk:r_float()
  ret.updpos.z=updpk:r_float()
  ret.upddir={}
  ret.upddir.x=updpk:r_float()
  ret.upddir.y=updpk:r_float()
  ret.upddir.z=updpk:r_float()
  ret.upds32u3=updpk:r_s32()
  ret.updteam=updpk:r_u8()
  ret.updsquad=updpk:r_u8()
  ret.updgroup=updpk:r_u8()
  return ret
end

function fill_creature_packet(ret,stpk,updpk)
  fill_dynamic_object_visual(ret,stpk,updpk)
  stpk:w_u8(ret.team)
  stpk:w_u8(ret.squad)
  stpk:w_u8(ret.group)
  stpk:w_float(ret.health)
  writevu32u16(stpk,ret.crvu32u16u1)
  writevu32u16(stpk,ret.crvu32u16u2)
  stpk:w_u16(ret.cru16u3)
  writevu8u8(stpk,ret.crvu8u8u4)

  updpk:w_float(ret.updhealth)
  updpk:w_s32(ret.upds32u1)
  updpk:w_u8(ret.updu8u2)
  updpk:w_float(ret.updpos.x)
  updpk:w_float(ret.updpos.y)
  updpk:w_float(ret.updpos.z)
  updpk:w_float(ret.upddir.x)
  updpk:w_float(ret.upddir.y)
  updpk:w_float(ret.upddir.z)
  updpk:w_s32(ret.upds32u3)
  updpk:w_u8(ret.updteam)
  updpk:w_u8(ret.updsquad)
  updpk:w_u8(ret.updgroup)
end

function parse_monster_packet(ret,stpk,updpk)
  parse_creature_packet(ret,stpk,updpk)
  ret.baseoutr=stpk:r_stringZ()
  ret.baseinr=stpk:r_stringZ()
  ret.smtrid=stpk:r_u16()
  ret.smtrtaskactive=stpk:r_u8()

  ret.updu16u1=updpk:r_u16()
  ret.updu16u2=updpk:r_u16()
  ret.upds32u3=updpk:r_s32()
  ret.upds32u4=updpk:r_s32()
  return ret
end

function fill_monster_packet(ret,stpk,updpk)
  fill_creature_packet(ret,stpk,updpk)
  stpk:w_stringZ(ret.baseoutr)
  stpk:w_stringZ(ret.baseinr)
  stpk:w_u16(ret.smtrid)
  stpk:w_u8(ret.smtrtaskactive)

  updpk:w_u16(ret.updu16u1)
  updpk:w_u16(ret.updu16u2)
  updpk:w_s32(ret.upds32u3)
  updpk:w_s32(ret.upds32u4)
end

function parse_trader_packet(ret,stpk,updpk)
  ret.money=stpk:r_u32()
  ret.profile=stpk:r_stringZ()
  ret.infammo=stpk:r_s32()
  ret.class=stpk:r_stringZ()
  ret.communityid=stpk:r_s32()
  ret.rank=stpk:r_s32()
  ret.reputation=stpk:r_s32()
  ret.charname=stpk:r_stringZ()
  return ret
end

function fill_trader_packet(ret,stpk,updpk)
  stpk:w_u32(ret.money)
  stpk:w_stringZ(ret.profile)
  stpk:w_s32(ret.infammo)
  stpk:w_stringZ(ret.class)
  stpk:w_s32(ret.communityid)
  stpk:w_s32(ret.rank)
  stpk:w_s32(ret.reputation)
  stpk:w_stringZ(ret.charname)
end

function parse_human_packet(ret,stpk,updpk)
  parse_trader_packet(ret,stpk,updpk)
  parse_monster_packet(ret,stpk,updpk)
  ret.huvu32u8u1=readvu32u8(stpk)
  ret.huvu32u8u2=readvu32u8(stpk)
  return ret
end

function fill_human_packet(ret,stpk,updpk)
  fill_trader_packet(ret,stpk,updpk)
  fill_monster_packet(ret,stpk,updpk)
  writevu32u8(stpk,ret.huvu32u8u1)
  writevu32u8(stpk,ret.huvu32u8u2)
end

function parse_skeleton_packet(ret,stpk,updpk)
  ret.skeleton=stpk:r_stringZ()
  ret.skeleton_flags=stpk:r_u8()
  ret.source_id=stpk:r_u16()
  return ret
end

function fill_skeleton_packet(ret,stpk,updpk)
  stpk:w_stringZ(ret.skeleton)
  stpk:w_u8(ret.skeleton_flags)
  stpk:w_u16(ret.source_id)
end

function parse_stalker_packet(ret,stpk,updpk,size)
  parse_human_packet(ret,stpk,updpk)
  parse_skeleton_packet(ret,stpk,updpk)
  ret.hellodlg=updpk:r_stringZ()
  ret.stunk1={}
  for i=stpk:r_tell(),size-1,1 do
    table.insert(ret.stunk1,stpk:r_u8())
  end
  return ret
end

function fill_stalker_packet(ret,stpk,updpk)
  fill_human_packet(ret,stpk,updpk)
  fill_skeleton_packet(ret,stpk,updpk)
  updpk:w_stringZ(ret.hellodlg)
  for i,v in ipairs(ret.stunk1) do
    stpk:w_u8(v)
  end
end

function parse_se_monster_packet(ret,stpk,updpk,size)
  parse_monster_packet(ret,stpk,updpk,size)
  parse_skeleton_packet(ret,stpk,updpk,size)
  ret.spec_obj_id=stpk:r_u16()
  ret.job_online=stpk:r_u8()
  ret.job_online_condlist=stpk:r_stringZ()
  ret.was_in_smtr=stpk:r_u8()

  ret.stunk1={}
  for i=stpk:r_tell(),size-1,1 do
    table.insert(ret.stunk1,stpk:r_u8())
  end

  return ret
end

function fill_se_monster_packet(ret,stpk,updpk)
  fill_monster_packet(ret,stpk,updpk)
  fill_skeleton_packet(ret,stpk,updpk)
  stpk:w_u16(ret.spec_obj_id)
  stpk:w_u8(ret.job_online)
  stpk:w_stringZ(ret.job_online_condlist)
  stpk:w_u8(ret.was_in_smtr)

  for i,v in ipairs(ret.stunk1) do
    stpk:w_u8(v)
  end

end

function read_stalker_params(sobj)
  stpk:w_begin(0)
  stpk:r_seek(2)
  uppk:w_begin(0)
  uppk:r_seek(2)
  sobj:STATE_Write(stpk)
  sobj:UPDATE_Write(uppk)
  local size=stpk:w_tell()
  local size1=uppk:w_tell()
  ogsm.dbglog("stk rsp "..size.." "..size1)
  local tbl=parse_stalker_packet({},stpk,uppk,size)
  ogsm.dbglog("stk rsp "..size.." "..stpk:r_tell())
  if size~=stpk:r_tell() then ogsm.dbglog("warning") end
  return tbl
end

function write_stalker_params(tbl,sobj)
  fill_stalker_packet(tbl,stpk,uppk)
  local size=stpk:w_tell()
  local size1=uppk:w_tell()
  sobj:STATE_Read(stpk,stpk:w_tell()-stpk:r_tell())
  sobj:UPDATE_Read(uppk)
end

function read_monster_params(sobj)
  stpk:w_begin(0)
  stpk:r_seek(2)
  uppk:w_begin(0)
  uppk:r_seek(2)
  sobj:STATE_Write(stpk)
  sobj:UPDATE_Write(uppk)
  local size=stpk:w_tell()
  local size1=uppk:w_tell()
  ogsm.dbglog("mtr rsp "..size.." "..size1)
  local tbl=parse_se_monster_packet({},stpk,uppk,size)
  ogsm.dbglog("rsp "..size.." "..stpk:r_tell())
  if size~=stpk:r_tell() then ogsm.dbglog("warning") end
  return tbl
end

function write_monster_params(tbl,sobj)
  fill_se_monster_packet(tbl,stpk,uppk)
  local size=stpk:w_tell()
  local size1=uppk:w_tell()
  sobj:STATE_Read(stpk,stpk:w_tell()-stpk:r_tell())
  sobj:UPDATE_Read(uppk)
end

function get_monster_portion(p_obj_id)
  local obj = alife():object(p_obj_id)
  if not obj then return "none" end
  stpk:w_begin(0)
  stpk:r_seek(2)
  obj:STATE_Write(stpk)
  local game_vertex_id = stpk:r_u16()
  local distance = stpk:r_float()
  local direct_control = stpk:r_s32()
  local level_vertex_id = stpk:r_s32()
  local object_flags = stpk:r_s32()
  local custom_data = stpk:r_stringZ()
  local cd = ogsm.parse_custom_data(custom_data)
  if not cd.creature_portion then return "none" end
  if not cd.creature_portion.portion then return "none" end
  return cd.creature_portion.portion
end


-- Монстр
function spawn_monster(sect, pos, lvid, gvid, portion, logic)
	local obj = alife():create(sect, pos, lvid, gvid)
	if obj then
		local params = read_monster_params(obj)

		if logic == "fake" then
			params.custom = "[logic] \nactive = mob_fake_death \n[mob_fake_death] \non_actor_dist_le = 10 | nil\n"
		elseif logic == "random_fake" then
			if math.random()>0.5 then
				params.custom = "[logic] \nactive = mob_fake_death \n[mob_fake_death] \non_actor_dist_le = 10 | nil\n"
			else
				params.custom = "[logic] \nactive = mob_home \n[mob_home] \npath_home = "..portion.." \nhome_min_radius = 20 \nhome_max_radius = 40 \naggressive_home \non_signal = sig_attacked | mob_combat \n[mob_combat] \non_timer = 30000 | mob_home \n"
			end
		else
			params.custom = "[logic] \nactive = mob_home \n[mob_home] \npath_home = "..portion.." \nhome_min_radius = 20 \nhome_max_radius = 40 \naggressive_home \non_signal = sig_attacked | mob_combat \n[mob_combat] \non_timer = 30000 | mob_home \n"
		end

		local cd = ogsm.parse_custom_data(params.custom)
		if not cd then cd={} end
		if not cd.creature_portion then cd.creature_portion = {} end
		cd.creature_portion.portion = portion
		params.custom = ogsm.gen_custom_data(cd)

		write_monster_params(params, obj)
		return obj
	end
end


-- Сталкер
function spawn_stalker(sect, pos, lvid, gvid, status, loot)
	local obj = alife():create(sect, pos, lvid, gvid)
	if obj then
		local params = read_stalker_params(obj)
		if status == "dead" then
			params.updhealth = 0
		end
		if loot == "empty" then
			params.custom = "[dont_spawn_loot]\n[dont_spawn_character_supplies]"
		end
		write_stalker_params(params, obj)
		return obj
	end
end
function change_stalker(name, section, value)
	if name and section and value then
		local obj = alife():object(name)
		if obj then
			local params = read_stalker_params(obj)
			params[section] = value
			write_stalker_params(params, obj)
			return obj
		end
	end
end


-- Аномалия
function spawn_anomaly(psect, ppos, plv, pgv)

	local obj = alife():create(psect, ppos, plv, pgv)

	local prad = math.random(1,3)

	if obj then

		stpk:w_begin(0)
		stpk:r_seek(2)

		obj:STATE_Write(stpk)

		local game_vertex_id = stpk:r_u16()
		local cse_alife_object__unk1_f32 = stpk:r_float()
		local cse_alife_object__unk2_u32 = stpk:r_s32()
		local level_vertex_id = stpk:r_s32()
		local object_flags = stpk:r_s32()
		local custom_data = stpk:r_stringZ()
		local story_id = stpk:r_s32()
		local cse_alife_object__unk3_u32 = stpk:r_s32()

		local shape_count = stpk:r_u8()
		for i=1,shape_count do
			local shape_type = stpk:r_u8()
			if shape_type == 0 then
				local center = stpk:r_vec3()
				local radius = stpk:r_float()
			else
				local box = stpk:r_matrix()
			end
		end

		local restrictor_type = stpk:r_u8()

		local cse_alife_custom_zone__unk1_f32 = stpk:r_float()
		local cse_alife_custom_zone__unk2_u32 = stpk:r_s32()
		local on_off_mode_enabled_time = stpk:r_s32()
		local on_off_mode_disabled_time = stpk:r_s32()
		local on_off_mode_shift_time = stpk:r_s32()

		local offline_interactive_radius = stpk:r_float()
		local artefact_spawn_places_count = stpk:r_u16()
		local cse_alife_anomalous_zone__unk1_u32 = stpk:r_s32()

		local last_spawn_time_present = stpk:r_u8()

		if stpk:r_elapsed() ~= 0 then ogsm.dbglog("left=" .. stpk:r_elapsed()) end

		stpk:w_u16(game_vertex_id)
		stpk:w_float(cse_alife_object__unk1_f32)
		stpk:w_s32(cse_alife_object__unk2_u32)
		stpk:w_s32(level_vertex_id)
		stpk:w_s32(object_flags)
		stpk:w_stringZ(custom_data)
		stpk:w_s32(story_id)
		stpk:w_s32(cse_alife_object__unk3_u32)

		stpk:w_u8(1)
		stpk:w_u8(0)
		local sphere_center = vector()
		sphere_center:set(0, 0, 0)
		stpk:w_vec3(sphere_center)
		stpk:w_float(prad)

		stpk:w_u8(restrictor_type)

		stpk:w_float(cse_alife_custom_zone__unk1_f32)
		cse_alife_custom_zone__unk2_u32 = bit_not(0)
		stpk:w_s32(cse_alife_custom_zone__unk2_u32)
		stpk:w_s32(on_off_mode_enabled_time)
		stpk:w_s32(on_off_mode_disabled_time)
		stpk:w_s32(on_off_mode_shift_time)

		stpk:w_float(offline_interactive_radius)
		stpk:w_u16(artefact_spawn_places_count)
		stpk:w_s32(cse_alife_anomalous_zone__unk1_u32)

		stpk:w_u8(last_spawn_time_present)

		obj:STATE_Read(stpk, stpk:w_tell()-stpk:r_tell())

	end

end


-- Переход
function spawn_lc(array)

	local vertexes = {
		from_marsh_1 = {level="marsh", pos=vector():set(-208.600,0.814,-290.500), lvid=37126, gvid=135},
		from_marsh_2 = {level="marsh", pos=vector():set(-203.700,0.889,-306.600), lvid=39249, gvid=140},
		from_red_forest = {level="red_forest", pos=vector():set(-183.811,2.238,-289.468), lvid=2709, gvid=1012},
		from_limansk = {level="limansk", pos=vector():set(11.643,-0.0078,-386.676), lvid=31944, gvid=1562},
		from_stancia_2 = {level="stancia_2", pos=vector():set(-71.771,0.147,380.869), lvid=171, gvid=1572},
		dest_red_forest_1 = {level="red_forest", pos=vector():set(-180.117,0.138,-285.48), lvid=3002, gvid=1012},
		dest_red_forest_2 = {level="red_forest", pos=vector():set(-12.188,0.831,-429.755), lvid=55948, gvid=963},
		dest_limansk_1 = {level="limansk", pos=vector():set(7.675,-0.009,-382.109), lvid=29060, gvid=1563},
		dest_limansk_2 = {level="limansk", pos=vector():set(56.247,3.299,327.082), lvid=53772, gvid=1558},
		dest_darkvalley_1 = {level="darkvalley", pos=vector():set(-82.600,-0.772,-366.800), lvid=77090, gvid=881},
		dest_yantar = {level="yantar", pos=vector():set(35.887,-11.889,-249.411), lvid=76292, gvid=1229},
		dest_escape_1 = {level="escape", pos=vector():set(-270.806,-21.687,-276.975), lvid=3364, gvid=473},
		dest_escape_2 = {level="escape", pos=vector():set(78.174,-0.098,458.663), lvid=403029, gvid=723},
		dest_garbage = {level="garbage", pos=vector():set(20.265,0.387,59.674), lvid=178066, gvid=312},
		dest_agroprom = {level="agroprom", pos=vector():set(280.820,0.312,4.643), lvid=37232, gvid=1064},
		dest_agroprom_underground_1 = {level="agroprom_underground", pos=vector():set(81.367,-20.404,-181.752), lvid=1560, gvid=1523},
		dest_agroprom_underground_2 = {level="agroprom_underground", pos=vector():set(58.595,-5.664,100.202), lvid=1063, gvid=1515},
		dest_military = {level="military", pos=vector():set(-399.879,-13.996,400.949), lvid=936, gvid=1507},
		dest_hospital = {level="hospital", pos=vector():set(-74.605,28.407,865.578), lvid=7345, gvid=1609},
		dest_jupiter_underground_1 = {level="jupiter_underground", pos=vector():set(-42.775,8.006,442.844), lvid=1828, gvid=1620},
		dest_jupiter_underground_2 = {level="jupiter_underground", pos=vector():set(82.735,4.026,-222.554), lvid=40813, gvid=1670},
		dest_stancia_2_start = {level="stancia_2", pos=vector():set(248.116,0.069,441.465), lvid=120641, gvid=1568}
	}

	local obj = alife():create("level_changer", vertexes[array.from_level]["pos"], vertexes[array.from_level]["lvid"], vertexes[array.from_level]["gvid"])

	if obj then

		stpk:w_begin(0)
		stpk:r_seek(2)

		obj:STATE_Write(stpk)

		-- свойства cse_alife_object
		local game_vertex_id = stpk:r_u16()
		local distance = stpk:r_float()
		local direct_control = stpk:r_s32()
		local level_vertex_id = stpk:r_s32()
		local object_flags = stpk:r_s32()
		local custom_data = stpk:r_stringZ()
		local story_id = stpk:r_s32()
		local spawn_story_id = stpk:r_s32()

		-- свойства cse_shape
		local shape_count = stpk:r_u8()
		local shape_type
		local center
		local radius

		if shape_count == 0 then
			shape_type = 0
			center = vector():set(0,0,0)
			radius = 10.0
			shape_count = 1
		else
			for i=1,shape_count do
				local shape_type = stpk:r_u8()
				if shape_type == 0 then
					local center = stpk:r_vec3()
					local radius = stpk:r_float()
				else
					local v1 = stpk:r_vec3()
					local v2 = stpk:r_vec3()
					local v3 = stpk:r_vec3()
					local v4 = stpk:r_vec3()
				end
			end
		end

		-- свойства cse_alife_space_restrictor
		local restrictor_type = stpk:r_u8()

		-- свойства cse_alife_level_changer
		local dest_game_vertex_id = stpk:r_u16()
		local dest_level_vertex_id = stpk:r_s32()
		local dest_position = stpk:r_vec3()
		local dest_direction = stpk:r_vec3()
		local dest_level_name = stpk:r_stringZ()
		local dest_graph_point = stpk:r_stringZ()
		local silent_mode = stpk:r_u8()

		-- свойства se_level_changer
		local enabled = stpk:r_u8()
		local hint = stpk:r_stringZ()
		local se_level_changer__marker = stpk:r_u16()

		if stpk:r_elapsed() ~= 0 then get_console():execute("left="..stpk:r_elapsed()) end

		-- свойства cse_alife_object
		stpk:w_u16(game_vertex_id)
		stpk:w_float(distance)
		stpk:w_s32(direct_control)
		stpk:w_s32(level_vertex_id)
		stpk:w_s32(object_flags)
		if array.custom ~= "" then
			stpk:w_stringZ(array.custom)
		else
			stpk:w_stringZ(custom_data)
		end
		stpk:w_s32(array.sid)
		stpk:w_s32(spawn_story_id)

		-- свойства cse_shape
		stpk:w_u8(shape_count)

		for i=1,shape_count do
			stpk:w_u8(shape_type)
			if shape_type == 0 then
				stpk:w_vec3(vector():set(0,0,0))
				stpk:w_float(3)
			else
				stpk:w_vec3(vector():set(3,0,0))
				stpk:w_vec3(vector():set(0,3,0))
				stpk:w_vec3(vector():set(0,0,3))
				stpk:w_vec3(vector():set(0,0,0))
			end
		end

		-- свойства cse_alife_space_restrictor
		stpk:w_u8(restrictor_type)

		-- свойства cse_alife_level_changer
		stpk:w_u16(vertexes[array.dest_level]["gvid"])
		stpk:w_s32(vertexes[array.dest_level]["lvid"])
		stpk:w_vec3(vertexes[array.dest_level]["pos"])
		stpk:w_vec3(array.dir)
		stpk:w_stringZ(vertexes[array.dest_level]["level"])
		stpk:w_stringZ(dest_graph_point)
		stpk:w_u8(array.mode)

		-- свойства se_level_changer
		stpk:w_u8(enabled)
		stpk:w_stringZ(hint)
		stpk:w_u16(se_level_changer__marker)

		obj:STATE_Read(stpk, stpk:w_tell()-stpk:r_tell())

		if array.show then level.map_add_object_spot_ser(obj.id, array.spot, array.hint) end

	end
end

-- Вертолёт и БТР из АМК 1.4.1
function spawn_military_tech_pack(obj, spawn_item)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()
	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		-- свойства cse_motion
		motion_name = packet:r_stringZ()
	end
	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health
	local cse_alife_helicopter__unk1_sz
	local engine_sound

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()
		engine_sound = packet:r_stringZ()
	elseif	spawn_item == "vehicle_btr" then
		health = packet:r_float()
	end

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	if spawn_item == "helicopter" then
		packet:w_stringZ("[logic]\ncfg = scripts\\escape\\esc_blockpost_heli.ltx")
	elseif	spawn_item == "vehicle_btr" then
		packet:w_stringZ("[logic]\ncfg = scripts\\escape\\esc_blockpost_btr.ltx")
	end
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)
	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)

	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)
	end
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	if spawn_item == "helicopter" then
		-- свойства cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "vehicles\\helicopter\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif  spawn_item == "vehicle_btr" then
		health = 1
		packet:w_float(health)
	end
	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

-------------------------------- Работа с нет-пакетами --------------------------------
------------------------- Copyright 2007-2011 xStream & DEXXX -------------------------