-------------------------- Copyright 2007-2010 xStream, DEXXX -------------------------
-------------------- Обработчик динамических партиклов для монстров -------------------


class "particle_manager"
function particle_manager:__init(params)
	self.type = params.typ or "absolute" --bone,absolute
	
	self.dir = params.dir or vector():set(0,0,0)
	self.len = params.len or 1
	self.looped = params.looped or false
	self.life_time = params.life_time or -1
	self.obj = params.obj or nil
	self.bone = params.bone or nil
	self.pos = params.pos or nil
	self.stop_on_death = params.stop_on_death or false
	self.gravity = params.gravity or vector():set(0,0,0)
	
	self.cgravity=vector():set(0,0,0)
	self.particle = particles_object(params.particle)
	if params.sound then self.sound = sound_object(params.sound) end
	self.started=false
	self.start_time = time_global()
	self.finalized=false
	self:start()
end

function particle_manager:__finalize()
	self.particle:stop()
	if self.sound then self.sound:stop() end
end

function particle_manager:start()
	if not self.particle:playing() then
		local pos
		if self.bone and self.obj then
			pos = self.obj:bone_position(self.bone)
		elseif self.pos then
			pos = self.pos
		end
		self.start_pos = pos
		if pos then
			self.particle:play_at_pos(pos)
			if self.sound then
				if not self.sound:playing() then 
					self.sound:play_at_pos(db.actor, self.obj:position(), 1, sound_object.looped)
				else
					self.sound:set_position(self.obj:position())
				end
			end
			self.started=true
		end
	end
end

function particle_manager:update(delta)
	if self.finalized then return end
	self.cgravity = self.cgravity:add(self.gravity)
	if self.particle:playing() then
		if self.life_time>-1 and time_global()>self.start_time+self.life_time then 
			self.started=false
			self.looped=false
			self:stop() 
			self.finalized=true
		end
		local pos
		if self.bone and self.obj then
	    		pos = self.obj:bone_position(self.bone)
			self.pos = pos
		elseif self.dir then
			self.pos = self.pos:add(self.dir:set_length(self.len/self.life_time*delta))
			self.pos = self.pos:add(self.cgravity)
			pos = self.pos
		end
		if pos then
			self.particle:move_to(pos,pos)
		end

		if self.sound then
			if not self.sound:playing() then 
				self.sound:play_at_pos(db.actor, self.obj:position(), 1, sound_object.looped) 
			else
				self.sound:set_position(self.obj:position())
			end
		end
	else
		if self.started then
			if self.looped then
				self:start()
			end
		end
	end
end

function particle_manager:stop()
	if self.particle:playing() then self.particle:stop() end
	if self.sound and self.sound:playing() then self.sound:stop() end
end

function particle_manager:get_pos()
	return self.pos
end

function particle_manager:is_finished()
	return self.finalized
end

function particle_manager:on_death()
	if self.stop_on_death then
		self:stop()
	end
end


-------------------- Обработчик динамических партиклов для монстров -------------------
-------------------------- Copyright 2007-2010 xStream, DEXXX -------------------------