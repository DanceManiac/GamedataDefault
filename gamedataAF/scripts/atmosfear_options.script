--------------------------------------------------------------------------------
-- AtmosFear options dialog ----------------------------------------------------
-- Made by Cromm Cruac ---------------------------------------------------------
-- for AtmosFear 3 -------------------------------------------------------------
-- 25.06.2011 ------------------------------------------------------------------
--------------------------------------------------------------------------------
local aspectRatio = 1

class "af_options_dialog" (CUIScriptWnd)

function af_options_dialog:__init() super()
	if(device().width/device().height>(1024/768+0.01)) then
		aspectRatio = 0.8
	end
	--self.atmosfear=CAtmosFearFake()
	self.atmosfear=atmosfear.get_atmosfear()
	self.param_ini = ini_file("atmosfear_parameters.ltx")

	self.m_preconditions	= {}
    self:InitControls()
    self:InitCallBacks()
end

function af_options_dialog:__finalize()

end

function af_options_dialog:InitControls()
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_mm_atmosfear_options.xml")

	xml:InitStatic				("background", self)
	self.dialog					= xml:InitStatic("main_dialog:dialog", self)
	
	-- main dialog
	xml:InitStatic				("main_dialog:cap_af_options", self.dialog)
	local btn
	btn = xml:Init3tButton		("main_dialog:btn_accept", self.dialog)
	self:Register				(btn, "btn_accept")
	btn = xml:Init3tButton		("main_dialog:btn_cancel", self.dialog)
	self:Register				(btn, "btn_cancel")
	btn = xml:Init3tButton		("main_dialog:btn_weather_options", self.dialog)
	self:Register				(btn, "btn_weather_options")
	btn = xml:Init3tButton		("main_dialog:btn_event_options", self.dialog)
	self:Register				(btn, "btn_event_options")
	btn = xml:Init3tButton		("main_dialog:btn_moon_options", self.dialog)
	self:Register				(btn, "btn_moon_options")
	btn = xml:Init3tButton		("main_dialog:btn_default_options", self.dialog)
	self:Register				(btn, "btn_default_options")

	self.dlg_event				= af_opt_event()
	self.dlg_event:InitControls	(0,0, xml, self)
	self.dlg_event:Show			(false)
	self.dialog:AttachChild		(self.dlg_event)
	xml:InitWindow				("tab_size", 0, self.dlg_event)
	
	self.dlg_weather				= af_opt_weather()
	self.dlg_weather:InitControls	(0,0, xml, self)
	self.dlg_weather:Show			(false)
	self.dialog:AttachChild		(self.dlg_weather)
	xml:InitWindow				("tab_size", 0, self.dlg_weather)

	self.dlg_moon				= af_opt_moon()
	self.dlg_moon:InitControls	(0,0, xml, self)
	self.dlg_moon:Show			(false)
	self.dialog:AttachChild		(self.dlg_moon)
	xml:InitWindow				("tab_size", 0, self.dlg_moon)

	self.dlg_default			= af_opt_default()
	self.dlg_default:InitControls	(0,0, xml, self)
	self.dlg_default:Show			(false)
	self.dialog:AttachChild		(self.dlg_default)
	xml:InitWindow				("tab_size", 0, self.dlg_default)

	self.message_box_save					= CUIMessageBoxEx()
	self:Register							(self.message_box_save, "message_box_save")
	self.message_box_user					= CUIMessageBoxEx()
	self:Register							(self.message_box_user, "message_box_user")
	self.message_box_load_default			= CUIMessageBoxEx()
	self:Register							(self.message_box_load_default, "message_box_load_default")
	self.message_box_user_done				= CUIMessageBoxEx()
	self:Register							(self.message_box_user_done, "message_box_user_done")
	self.message_box_load_default_done		= CUIMessageBoxEx()
	self:Register							(self.message_box_load_default_done, "message_box_load_default_done")

	self.b_restart_system_shown	= false
	
	self:SetCurrentValues()

end

--######################################################################################################################
--#									REGISTER OPTIONS
--######################################################################################################################

function af_options_dialog:OptionsFromIni(combo, section)
	combo:ClearList()
	local options = xr_s.parse_ini_section_to_array(self.param_ini,section)
	local inv_options = {}
	if options~=nil then
		for option, value in pairs(options) do
			inv_options[value+1]=option
		end
		--table.sort(inv_options)
		for value, option in pairs(inv_options) do
			combo:AddItem(game.translate_string("st_"..option), value-1)
		end
	end
end

function af_options_dialog:RegisterCheck(xml, dialog, name, dialogObj)
	self["check_"..name] = xml:InitCheck(dialog..":check_"..name, dialogObj)
	self:Register (self["check_"..name], "check_"..name)
end

function af_options_dialog:RegisterCombo(xml, dialog, name, ini_section, dialogObj)
	self["list_"..name] = xml:InitComboBox	(dialog..":list_"..name, dialogObj)
	self["list_"..name]:ClearList()
	self["list_"..name]:SetAutoDelete(true)
	if ini_section == nil then
		ini_section = name
	end
	self:OptionsFromIni(self["list_"..name], "list_"..ini_section)
	self:Register (self["list_"..name], "list_"..name)
end

function af_options_dialog:RegisterTrack(xml, dialog, name, dialogObj)
	local combo = xml:InitTrackBar	(dialog..":"..name, dialogObj)
	self:Register (combo, name)
	return combo
end

function af_options_dialog:RegisterLengthRadio(xml, name, dialogObj, x, y)
	self["radio_"..name] = xml:InitTab("weather_dialog:radio_zaton_period_good_length", dialogObj)
	self["radio_"..name]:SetWndPos(vector2():set(x*aspectRatio,y))
	self:Register(self["radio_"..name], "radio_"..name)
end

--######################################################################################################################
--#								GET/SET FUNCTIONS
--######################################################################################################################

function af_options_dialog:SetComboValue(option_name,af_option)
	local combo = self["list_"..option_name]
	if af_option==nil then
		af_option=self.atmosfear["opt_"..option_name]
	end
	if self.param_ini:line_exist("atmosfear_option_names", af_option) and af_option~=nil then
		local option = self.param_ini:r_string("atmosfear_option_names", af_option)
		combo:SetText(game.translate_string(option))
	else
		combo:SetText("option not found")
	end
end

function af_options_dialog:SetRadioValue(radio_name,af_option)
	local radio = self["radio_"..radio_name]
	if af_option==nil then
		af_option=self.atmosfear["opt_"..radio_name]
	end
	if radio~=nil and af_option~=nil then
		radio:SetActiveTab(af_option)
	end
end

function af_options_dialog:SetLengthRadioValue(radio_name,af_option)
	local radio = self["radio_"..radio_name]
	if af_option==nil then
		af_option=self.atmosfear["opt_"..radio_name]
	end
	if radio~=nil and af_option~=nil then
		radio:SetActiveTab(af_option)
	end
end

function af_options_dialog:SetCheckValue(name,af_option)
	local checkbox = self["check_"..name]
	if af_option==nil then
		af_option=self.atmosfear["opt_"..name]
	end
	if checkbox~=nil and af_option~=nil then
		if (tonumber(af_option)==1) then
			checkbox:SetCheck(true)
		else
			checkbox:SetCheck(false)
		end
	end
end

function af_options_dialog:GetComboValue(option_name)
	local selected = self["list_"..option_name]:GetText()
	local parameters = xr_s.parse_ini_section_to_array(self.param_ini,"atmosfear_option_names")
	for option, name in pairs(parameters) do
		if game.translate_string(name)==selected then
			return option
		end
	end
end

function af_options_dialog:GetRadioValue(option_name)
	local selected = self["radio_"..option_name]:GetActiveId()
	return selected
end

function af_options_dialog:GetCheckValue(option_name)
	local selected = self["check_"..option_name]:GetCheck()
	if selected then
		return 1
	else
		return 0
	end
end

function af_options_dialog:SetComboOption(option_name, number)
	if number then
		self.atmosfear["opt_"..option_name]=tonumber(self:GetComboValue(option_name))
	else
		self.atmosfear["opt_"..option_name]=self:GetComboValue(option_name)
	end
end

function af_options_dialog:SetRadioOption(option_name, number)
	if number then
		self.atmosfear["opt_"..option_name]=tonumber(self:GetRadioValue(option_name))
	else
		self.atmosfear["opt_"..option_name]=self:GetRadioValue(option_name)
	end
end

function af_options_dialog:SetCheckOption(option_name, number)
	self.atmosfear["opt_"..option_name]=self:GetCheckValue(option_name)
end

--######################################################################################################################
--#								SETTING VALUES
--######################################################################################################################

function af_options_dialog:SetCurrentValues()
	self:SetComboValue("zaton_period_good",nil)
	self:SetComboValue("zaton_period_bad",nil)
	self:SetComboValue("jupiter_period_good",nil)
	self:SetComboValue("jupiter_period_bad",nil)
	self:SetComboValue("pripyat_period_good",nil)
	self:SetComboValue("pripyat_period_bad",nil)

	self:SetRadioValue("zaton_period_good_length",nil)
	self:SetRadioValue("zaton_period_bad_length",nil)
	self:SetRadioValue("jupiter_period_good_length",nil)
	self:SetRadioValue("jupiter_period_bad_length",nil)
	self:SetRadioValue("pripyat_period_good_length",nil)
	self:SetRadioValue("pripyat_period_bad_length",nil)

	self:SetCheckValue("enable_blowout",nil)
	self:SetCheckValue("enable_fallout",nil)
	self:SetCheckValue("enable_psi_storm",nil)
	self:SetComboValue("blowout_freq",nil)
	self:SetComboValue("blowout_fate",nil)
	self:SetComboValue("blowout_warning",nil)
	self:SetComboValue("blowout_task",nil)
	self:SetComboValue("fallout_freq",nil)
	self:SetComboValue("fallout_fate",nil)
	self:SetComboValue("fallout_warning",nil)
	self:SetComboValue("fallout_task",nil)
	self:SetComboValue("psi_storm_freq",nil)
	self:SetComboValue("psi_storm_fate",nil)
	self:SetComboValue("psi_storm_warning",nil)
	self:SetComboValue("psi_storm_task",nil)
	
	self:SetRadioValue("moon_phase",nil)
	self:SetComboValue("night_brightness",nil)
	
	self.dlg_weather:Show		(true)

	self:SetComboValue("weather_balance_presets",nil)
	self:SetComboValue("weather_length_presets",nil)
end

function af_options_dialog:SetDefaultValues()
	local parameters = xr_s.parse_ini_section_to_array(self.param_ini,"atmosfear_default_parameters")
	self:SetComboValue("zaton_period_good",			parameters["opt_zaton_period_good"])
	self:SetComboValue("zaton_period_bad",			parameters["opt_zaton_period_bad"])
	self:SetRadioValue("zaton_period_good_length",	parameters["opt_zaton_period_good_length"])
	self:SetRadioValue("zaton_period_bad_length",	parameters["opt_zaton_period_bad_length"])
	self:SetComboValue("jupiter_period_good",		parameters["opt_jupiter_period_good"])
	self:SetComboValue("jupiter_period_bad",		parameters["opt_jupiter_period_bad"])
	self:SetRadioValue("jupiter_period_good_length",parameters["opt_jupiter_period_good_length"])
	self:SetRadioValue("jupiter_period_bad_length",	parameters["opt_jupiter_period_bad_length"])
	self:SetComboValue("pripyat_period_good",		parameters["opt_pripyat_period_good"])
	self:SetComboValue("pripyat_period_bad",		parameters["opt_pripyat_period_bad"])
	self:SetRadioValue("pripyat_period_good_length",parameters["opt_pripyat_period_good_length"])
	self:SetRadioValue("pripyat_period_bad_length",	parameters["opt_pripyat_period_bad_length"])

	self:SetCheckValue("enable_blowout",			parameters["opt_enable_blowout"])
	self:SetComboValue("blowout_freq",				parameters["opt_blowout_freq"])
	self:SetComboValue("blowout_fate",				parameters["opt_blowout_fate"])
	self:SetComboValue("blowout_warning",			parameters["opt_blowout_warning"])
	self:SetComboValue("blowout_task",				parameters["opt_blowout_task"])
	self:SetCheckValue("enable_fallout",			parameters["opt_enable_fallout"])
	self:SetComboValue("fallout_freq",				parameters["opt_fallout_freq"])
	self:SetComboValue("fallout_fate",				parameters["opt_fallout_fate"])
	self:SetComboValue("fallout_warning",			parameters["opt_fallout_warning"])
	self:SetComboValue("fallout_task",				parameters["opt_fallout_task"])
	self:SetCheckValue("enable_psi_storm",			parameters["opt_enable_psi_storm"])
	self:SetComboValue("psi_storm_freq",			parameters["opt_psi_storm_freq"])
	self:SetComboValue("psi_storm_fate",			parameters["opt_psi_storm_fate"])
	self:SetComboValue("psi_storm_warning",			parameters["opt_psi_storm_warning"])
	self:SetComboValue("psi_storm_task",			parameters["opt_psi_storm_task"])

	self:SetRadioValue("moon_phase",				parameters["opt_moon_phase"])
	self:SetComboValue("night_brightness",			parameters["opt_night_brightness"])

	self:SetComboValue("weather_balance_presets",	parameters["opt_weather_balance_presets"])
	self:SetComboValue("weather_length_presets",	parameters["opt_weather_length_presets"])
end

function af_options_dialog:InitCallBacks()
	self:AddCallback("btn_accept",							ui_events.BUTTON_CLICKED,	self.OnBtnAccept,			self)
	self:AddCallback("btn_cancel",							ui_events.BUTTON_CLICKED,	self.OnBtnCancel,			self)
	self:AddCallback("btn_weather_options",					ui_events.BUTTON_CLICKED,	self.OnBtnWeatherOptions,	self)
	self:AddCallback("btn_event_options",					ui_events.BUTTON_CLICKED,	self.OnBtnEventOptions,		self)
	self:AddCallback("btn_moon_options",					ui_events.BUTTON_CLICKED,	self.OnBtnMoonOptions,		self)
	self:AddCallback("btn_default_options",					ui_events.BUTTON_CLICKED,	self.OnBtnDefaultOptions,		self)
	self:AddCallback("list_weather_balance_presets",		ui_events.LIST_ITEM_SELECT,	self.OnWeatherBalancePresets,		self)
	self:AddCallback("list_weather_length_presets",			ui_events.LIST_ITEM_SELECT,	self.OnWeatherLengthPresets,		self)
	self:AddCallback("list_zaton_period_good",				ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("list_zaton_period_bad",				ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("list_jupiter_period_good",			ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("list_jupiter_period_bad",				ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("list_pripyat_period_good",			ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("list_pripyat_period_bad",				ui_events.LIST_ITEM_SELECT,	self.SetBalancePresetToCustom,		self)
	self:AddCallback("radio_zaton_period_good_length",		ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("radio_zaton_period_bad_length",		ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("radio_jupiter_period_good_length",	ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("radio_jupiter_period_bad_length",		ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("radio_pripyat_period_good_length",	ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("radio_pripyat_period_bad_length",		ui_events.TAB_CHANGED,		self.SetLengthPresetToCustom,		self)
	self:AddCallback("btn_load_color_balance",				ui_events.BUTTON_CLICKED,	self.OnBtnLoadColorBalance,		self)
	self:AddCallback("btn_load_default_settings",			ui_events.BUTTON_CLICKED,	self.OnBtnLoadDefaultSettings,		self)
	self:AddCallback("message_box_user",     				ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgUserYes,						self)
	self:AddCallback("message_box_load_default",     		ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgLoadDefaultYes,						self)
end

--######################################################################################################################
--#								CALLBACK FUNCTIONS
--######################################################################################################################

function af_options_dialog:OnBtnWeatherOptions()
	self.dlg_weather:Show		(true)
	self.dlg_event:Show			(false)
	self.dlg_moon:Show			(false)
	self.dlg_default:Show		(false)
end

function af_options_dialog:OnBtnEventOptions()
	self.dlg_weather:Show		(false)
	self.dlg_event:Show			(true)
	self.dlg_moon:Show			(false)
	self.dlg_default:Show		(false)
end

function af_options_dialog:OnBtnMoonOptions()
	self.dlg_weather:Show		(false)
	self.dlg_event:Show			(false)
	self.dlg_moon:Show			(true)
	self.dlg_default:Show		(false)
end

function af_options_dialog:OnBtnDefaultOptions()
	self.dlg_weather:Show		(false)
	self.dlg_event:Show			(false)
	self.dlg_moon:Show			(false)
	self.dlg_default:Show		(true)
end

function af_options_dialog:OnBtnLoadColorBalance()
	self.message_box_user:InitMessageBox	("message_box_yes_no")
	self.message_box_user:SetText("st_msg_load_user")
	self.message_box_user:ShowDialog(true)
end

function af_options_dialog:OnBtnLoadDefaultSettings()
	self.message_box_load_default:InitMessageBox	("message_box_yes_no")
	self.message_box_load_default:SetText("st_msg_load_default_settings")
	self.message_box_load_default:ShowDialog(true)
end

function af_options_dialog:OnMsgUserYes()
	self.atmosfear:loadDefaultConsoleSettings()
	self.message_box_user_done:InitMessageBox("message_box_ok")
	self.message_box_user_done:SetText("st_msg_load_user_done")
	self.message_box_user_done:ShowDialog(true)
end

function af_options_dialog:OnMsgLoadDefaultYes()
	self:SetDefaultValues()
	self.dlg_default:Show		(false)
	self.dlg_weather:Show		(true)
	self.message_box_load_default_done:InitMessageBox("message_box_ok")
	self.message_box_load_default_done:SetText("st_msg_load_default_settings_done")
	self.message_box_load_default_done:ShowDialog(true)
end

function af_options_dialog:OnWeatherBalancePresets()
	local selected = self:GetComboValue("weather_balance_presets")
	local parameters = xr_s.parse_ini_section_to_array(self.param_ini,"atmosfear_preset_"..selected)
	if parameters~=nil then
		for option, name in pairs(parameters) do
			self:SetComboValue(option,name)
		end
	end
end

function af_options_dialog:OnWeatherLengthPresets()
	local selected = self:GetComboValue("weather_length_presets")
	local parameters = xr_s.parse_ini_section_to_array(self.param_ini,"atmosfear_preset_"..selected)
	if parameters~=nil then
		for option, name in pairs(parameters) do
			self:SetRadioValue(option,name)
		end
	end
	self:SetComboValue("weather_length_presets",selected)
end

function af_options_dialog:SetBalancePresetToCustom()
	self:SetComboValue("weather_balance_presets","balance_custom")
end

function af_options_dialog:SetLengthPresetToCustom()
	self:SetComboValue("weather_length_presets","length_custom")
end

function af_options_dialog:OnBtnAccept()

	self:SetComboOption("zaton_period_good",false)
	self:SetComboOption("zaton_period_bad",false)
	self:SetComboOption("jupiter_period_good",false)
	self:SetComboOption("jupiter_period_bad",false)
	self:SetComboOption("pripyat_period_good",false)
	self:SetComboOption("pripyat_period_bad",false)

	if self.atmosfear["zaton_period_good_length"] ~= tonumber(self:GetRadioValue("zaton_period_good_length")) or self.atmosfear["zaton_period_bad_length"] ~= tonumber(self:GetRadioValue("zaton_period_bad_length")) then
		self:SetRadioOption("zaton_period_good_length",true)
		self:SetRadioOption("zaton_period_bad_length",true)
		level_weathers.get_weather_manager():get_next_period_change_hour(level_weathers.get_weather_manager().period)
	end
	if self.atmosfear["jupiter_period_good_length"] ~= tonumber(self:GetRadioValue("jupiter_period_good_length")) or self.atmosfear["jupiter_period_bad_length"] ~= tonumber(self:GetRadioValue("jupiter_period_bad_length")) then
		self:SetRadioOption("jupiter_period_good_length",true)
		self:SetRadioOption("jupiter_period_bad_length",true)
		level_weathers.get_weather_manager():get_next_period_change_hour(level_weathers.get_weather_manager().period)
	end
	if self.atmosfear["pripyat_period_good_length"] ~= tonumber(self:GetRadioValue("pripyat_period_good_length")) or self.atmosfear["pripyat_period_bad_length"] ~= tonumber(self:GetRadioValue("pripyat_period_bad_length")) then
		self:SetRadioOption("pripyat_period_good_length",true)
		self:SetRadioOption("pripyat_period_bad_length",true)
		level_weathers.get_weather_manager():get_next_period_change_hour(level_weathers.get_weather_manager().period)
	end

	if (self.atmosfear["opt_enable_blowout"] == 0 and self:GetCheckValue("enable_blowout")==1) or self.atmosfear["opt_blowout_freq"]~=tonumber(self:GetComboValue("blowout_freq")) then
		self:SetComboOption("blowout_freq",true)
		surge_manager.get_surge_manager():new_surge_time(true)
	end
	if (self.atmosfear["opt_enable_psi_storm"] == 0 and self:GetCheckValue("enable_psi_storm")==1) or self.atmosfear["opt_psi_storm_freq"]~=tonumber(self:GetComboValue("psi_storm_freq")) then
		self:SetComboOption("psi_storm_freq",true)
		psi_storm_manager.get_psi_storm_manager():new_psi_storm_time(true)
	end
	self:SetComboOption("fallout_freq",true)
	
	self:SetCheckOption("enable_blowout",true)
	self:SetCheckOption("enable_fallout",true)
	self:SetCheckOption("enable_psi_storm",true)
	self:SetComboOption("blowout_fate",false)
	self:SetComboOption("blowout_warning",false)
	self:SetComboOption("blowout_task",false)
	self:SetComboOption("fallout_fate",false)
	self:SetComboOption("fallout_warning",false)
	self:SetComboOption("fallout_task",false)
	self:SetComboOption("psi_storm_fate",false)
	self:SetComboOption("psi_storm_warning",false)
	self:SetComboOption("psi_storm_task",false)
	
	if self.atmosfear["opt_moon_phase"] ~= self:GetRadioValue("moon_phase") then
		self:SetRadioOption("moon_phase",false)
		level_weathers.get_weather_manager():select_weather(true)
	end
	if self.atmosfear["opt_night_brightness"] ~= self:GetComboValue("night_brightness") then
		self:SetComboOption("night_brightness",false)
		level_weathers.get_weather_manager():select_weather(true)
	end
	
	self:SetComboOption("weather_balance_presets",false)
	self:SetComboOption("weather_length_presets",false)

	self.dlg_weather:Show		(false)
	self.dlg_event:Show			(false)
	self.dlg_moon:Show			(false)
	self.dlg_default:Show		(false)
	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)
	self.message_box_save:InitMessageBox("message_box_ok")
	self.message_box_save:SetText("st_msg_after_save")
	self.message_box_save:ShowDialog(true)
	
end

function af_options_dialog:OnBtnCancel()
	self.dlg_weather:Show		(false)
	self.dlg_event:Show			(false)
	self.dlg_moon:Show			(false)
	self.dlg_default:Show		(false)
	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)
end

function af_options_dialog:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	if res==false then

		local bind = dik_to_bind(dik)

		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self.dlg_weather:Show		(false)
				self.dlg_event:Show			(false)
				self.dlg_moon:Show			(false)
				self.dlg_default:Show		(false)
				self.owner:ShowDialog(true)
				self:HideDialog()
				self.owner:Show(true)
			end
			if dik==DIK_keys.DIK_RETURN then
				self:OnBtnAccept()
			end

		end
	end

	return res
end

function af_options_dialog:Update()
	CUIScriptWnd.Update(self)
end

--######################################################################################################################
--#													af_opt_event													#
--######################################################################################################################

class "af_opt_event" (CUIWindow)

function af_opt_event:__init() super()
end

function af_opt_event:__finalize()
end

function af_opt_event:InitControls(x, y, xml, handler)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(624,411))
	self:SetAutoDelete(true)

	xml:InitStatic				("event_dialog:div_1", self)
	xml:InitStatic				("event_dialog:div_2", self)
	xml:InitStatic				("event_dialog:cap_af_blowout", self)
	xml:InitStatic				("event_dialog:cap_af_fallout", self)
	xml:InitStatic				("event_dialog:cap_af_psi_storm", self)
	xml:InitStatic				("event_dialog:cap_check_enable_blowout", self)
	xml:InitStatic				("event_dialog:cap_check_enable_fallout", self)
	xml:InitStatic				("event_dialog:cap_check_enable_psi_storm", self)
	xml:InitStatic				("event_dialog:cap_blowout_freq", self)
	xml:InitStatic				("event_dialog:cap_blowout_fate", self)
	xml:InitStatic				("event_dialog:cap_blowout_warning", self)
	xml:InitStatic				("event_dialog:cap_blowout_task", self)
	xml:InitStatic				("event_dialog:cap_fallout_freq", self)
	xml:InitStatic				("event_dialog:cap_fallout_fate", self)
	xml:InitStatic				("event_dialog:cap_fallout_warning", self)
	xml:InitStatic				("event_dialog:cap_fallout_task", self)
	xml:InitStatic				("event_dialog:cap_psi_storm_freq", self)
	xml:InitStatic				("event_dialog:cap_psi_storm_fate", self)
	xml:InitStatic				("event_dialog:cap_psi_storm_warning", self)
	xml:InitStatic				("event_dialog:cap_psi_storm_task", self)

	handler:RegisterCheck(xml, "event_dialog", "enable_blowout", self)
	handler:RegisterCheck(xml, "event_dialog", "enable_fallout", self)
	handler:RegisterCheck(xml, "event_dialog", "enable_psi_storm", self)

	handler:RegisterCombo(xml, "event_dialog", "blowout_freq", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "fallout_freq", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "psi_storm_freq", nil, self)

	handler:RegisterCombo(xml, "event_dialog", "blowout_fate", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "blowout_warning", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "blowout_task", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "fallout_fate", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "fallout_warning", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "fallout_task", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "psi_storm_fate", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "psi_storm_warning", nil, self)
	handler:RegisterCombo(xml, "event_dialog", "psi_storm_task", nil, self)
end

--######################################################################################################################
--#													af_opt_weather													#
--######################################################################################################################

class "af_opt_weather" (CUIWindow)

function af_opt_weather:__init() super()
end

function af_opt_weather:__finalize()
end


function af_opt_weather:InitControls(x, y, xml, handler)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(624,411))
	self:SetAutoDelete(true)
	xml:InitStatic				("weather_dialog:div_1", self)
	xml:InitStatic				("weather_dialog:div_2", self)
	xml:InitStatic				("weather_dialog:div_3", self)
	xml:InitStatic				("weather_dialog:cap_weather_presets", self)
	xml:InitStatic				("weather_dialog:cap_weather_balance_presets", self)
	xml:InitStatic				("weather_dialog:cap_weather_length_presets", self)
	xml:InitStatic				("weather_dialog:cap_af_zaton", self)
	xml:InitStatic				("weather_dialog:cap_af_jupiter", self)
	xml:InitStatic				("weather_dialog:cap_af_pripyat", self)

	handler:RegisterCombo		(xml, "weather_dialog", "weather_balance_presets", nil, self)
	handler:RegisterCombo		(xml, "weather_dialog", "weather_length_presets", nil, self)

	handler:RegisterCombo		(xml, "weather_dialog", "zaton_period_good", "periods", self)
	handler:RegisterCombo		(xml, "weather_dialog", "zaton_period_bad", "periods", self)
	handler:RegisterLengthRadio	(xml, "zaton_period_good_length", self, 112, 158)
	handler:RegisterLengthRadio	(xml, "zaton_period_bad_length", self, 367, 158)
	
	handler:RegisterCombo		(xml, "weather_dialog", "jupiter_period_good", "periods", self)
	handler:RegisterCombo		(xml, "weather_dialog", "jupiter_period_bad", "periods", self)
	handler:RegisterLengthRadio	(xml, "jupiter_period_good_length", self, 112, 245)
	handler:RegisterLengthRadio	(xml, "jupiter_period_bad_length", self, 367, 245)

	handler:RegisterCombo		(xml, "weather_dialog", "pripyat_period_good", "periods", self)
	handler:RegisterCombo		(xml, "weather_dialog", "pripyat_period_bad", "periods", self)
	handler:RegisterLengthRadio	(xml, "pripyat_period_good_length", self, 112, 332)
	handler:RegisterLengthRadio	(xml, "pripyat_period_bad_length", self, 367, 332)
	
end


--######################################################################################################################
--#													af_opt_moon														#
--######################################################################################################################

class "af_opt_moon" (CUIWindow)

function af_opt_moon:__init() super()
end

function af_opt_moon:__finalize()
end

function af_opt_moon:InitControls(x, y, xml, handler)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(624,411))
	self:SetAutoDelete(true)
	
	xml:InitStatic				("moon_dialog:cap_moon_phases", self)
	xml:InitStatic				("moon_dialog:cap_moon_frequency", self)
	xml:InitStatic				("moon_dialog:cap_moon_static", self)
	xml:InitStatic				("moon_dialog:cap_night_brightness", self)
	handler.radio_moon_phase = xml:InitTab("moon_dialog:radio_moon_phase", self)
	handler:Register(handler.radio_moon_phase , "radio_moon_phase")
	handler:RegisterCombo		(xml, "moon_dialog", "night_brightness", nil, self)
end

--######################################################################################################################
--#													af_opt_default														#
--######################################################################################################################

class "af_opt_default" (CUIWindow)

function af_opt_default:__init() super()
end

function af_opt_default:__finalize()
end

function af_opt_default:InitControls(x, y, xml, handler)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(624,411))
	self:SetAutoDelete(true)
	btn = xml:Init3tButton		("defaults_dialog:btn_load_color_balance", self)
	handler:Register				(btn, "btn_load_color_balance")
	btn = xml:Init3tButton		("defaults_dialog:btn_load_default_settings", self)
	handler:Register				(btn, "btn_load_default_settings")
end

--######################################################################################################################
--#													FAKE AF														#
--######################################################################################################################

class "CAtmosFearFake" (CUIWindow)

function CAtmosFearFake:__init() super()
	self.param_ini = ini_file("atmosfear_parameters.ltx")
	self:loadDefaultParameters()
end

function CAtmosFearFake:loadDefaultParameters()
	local parameters = xr_s.parse_ini_section_to_array(self.param_ini,"atmosfear_default_parameters")
	self.opt_weather_balance_presets	= parameters["opt_weather_balance_presets"]
	self.opt_weather_length_presets		= parameters["opt_weather_length_presets"]

	self.opt_zaton_period_good			= parameters["opt_zaton_period_good"]
	self.opt_zaton_period_bad			= parameters["opt_zaton_period_bad"]
	self.opt_zaton_period_good_length	= tonumber(parameters["opt_zaton_period_good_length"])
	self.opt_zaton_period_bad_length	= tonumber(parameters["opt_zaton_period_bad_length"])
	self.opt_jupiter_period_good		= parameters["opt_jupiter_period_good"]
	self.opt_jupiter_period_bad			= parameters["opt_jupiter_period_bad"]
	self.opt_jupiter_period_good_length	= tonumber(parameters["opt_jupiter_period_good_length"])
	self.opt_jupiter_period_bad_length	= tonumber(parameters["opt_jupiter_period_bad_length"])
	self.opt_pripyat_period_good		= parameters["opt_pripyat_period_good"]
	self.opt_pripyat_period_bad			= parameters["opt_pripyat_period_bad"]
	self.opt_pripyat_period_good_length	= tonumber(parameters["opt_pripyat_period_good_length"])
	self.opt_pripyat_period_bad_length	= tonumber(parameters["opt_pripyat_period_bad_length"])

	self.opt_enable_blowout				= tonumber(parameters["opt_enable_blowout"])
	self.opt_blowout_freq				= tonumber(parameters["opt_blowout_freq"])
	self.opt_blowout_fate				= parameters["opt_blowout_fate"]
	self.opt_blowout_warning			= parameters["opt_blowout_warning"]
	self.opt_blowout_task				= parameters["opt_blowout_task"]
	self.opt_enable_fallout				= tonumber(parameters["opt_enable_fallout"])
	self.opt_fallout_freq				= tonumber(parameters["opt_fallout_freq"])
	self.opt_fallout_fate				= parameters["opt_fallout_fate"]
	self.opt_fallout_warning			= parameters["opt_fallout_warning"]
	self.opt_fallout_task				= parameters["opt_fallout_task"]
	self.opt_enable_psi_storm			= tonumber(parameters["opt_enable_psi_storm"])
	self.opt_psi_storm_freq				= tonumber(parameters["opt_psi_storm_freq"])
	self.opt_psi_storm_fate				= parameters["opt_psi_storm_fate"]
	self.opt_psi_storm_warning			= parameters["opt_psi_storm_warning"]
	self.opt_psi_storm_task				= parameters["opt_psi_storm_task"]

	self.opt_moon_phase					= parameters["opt_moon_phase"]
	self.opt_night_brightness			= parameters["opt_night_brightness"]
end
